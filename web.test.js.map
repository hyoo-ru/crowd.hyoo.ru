{"version":3,"sources":["../../../../mol/test/test.test.ts","../../../../mol/type/assert/assert.test.js","../../../../mol/type/assert/assert.js","../../../../mol/type/partial/deep/deep.test.js","../../../../mol/type/partial/deep/deep.js","../../../../mol/jsx/jsx.test.tsx","../../../../mol/jsx/jsx.ts","../../../../mol/compare/deep/deep.test.tsx","../../../../mol/compare/deep/deep.ts","../../../../mol/assert/assert.test.ts","../../../../mol/assert/assert.ts","../../clock/clock.test.ts","../../reg/reg.test.ts","../../numb/numb.test.ts","../../numb/numb.ts","../../set/set.test.ts","../../set/set.ts","../../list/list.test.ts","../../union/union.test.ts","../../union/union.ts","../../recast.test.ts","../../../../mol/delegate/delegate.test.ts","../../../../mol/type/writable/writable.test.js","../../../../mol/after/mock/mock.test.ts","../../../../mol/after/tick/tick.test.ts","../../../../mol/object/object.test.ts","../../../../mol/log3/log3.test.ts","../../../../mol/wrapper/wrapper.test.ts","../../../../mol/after/frame/frame.test.ts","../../../../mol/compare/any/any.test.ts","../../../../mol/conform/conform.test.ts","../../../../mol/array/trim/trim.test.ts","../../../../mol/fiber/fiber.test.ts","../../../../mol/atom2/atom2.test.ts","../../../../mol/type/param/param.test.js","../../../../mol/type/result/result.test.js","../../../../mol/mem/mem.test.ts","../../../../mol/dict/dict.test.tsx","../../../../mol/mem/key/key.test.ts","../../../../mol/const/const.test.ts","../../../../mol/atom2/field/field.ts","../../../../mol/atom2/autorun/autorun.test.ts","../../../../mol/after/timeout/timeout.test.ts","../../../../mol/memo/memo.test.ts","../../../../mol/func/name/name.test.ts","../../../../mol/type/keys/extract/extract.test.js","../../../../mol/view/view/view.test.ts","../../../../mol/style/sheet/sheet.test.ts","../../../../mol/state/session/session.test.ts","../../../../mol/state/local/local.mock.test.ts","../../../../mol/state/local/local.test.ts","../../../../mol/button/button.test.ts","../../../../mol/maybe/maybe.test.ts","../../../../mol/charset/decode/decode.test.ts","../../../../mol/charset/encode/encode.test.ts","../../../../mol/after/work/work.test.ts","../../../../mol/state/arg/arg.web.test.ts","../../dict/dict.test.ts","../../../../mol/type/intersect/intersect.test.js","../../../../mol/regexp/regexp.test.ts","../../text/tokenizer/tokenizer.test.ts","../../text/text.test.ts","../../../../mol/syntax2/md/md.test.ts","../../../../mol/jsx/attach/attach.test.tsx","../../../../mol/jsx/attach/attach.ts","../../../../mol/jsx/view/view.test.tsx","../../../../mol/jsx/view/view.tsx","../../../../mol/type/equals/equals.test.js","../../../../mol/type/equals/equals.js","../../../../mol/diff/path/path.test.ts","../../../../mol/diff/path/path.ts","../../../../mol/error/mix/mix.ts","../../../../mol/view/tree/test/tree.test.ts","../../../../mol/tree/tree.test.ts"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\n\texport function $mol_test( set : { [ name : string ] : string | ( ( context : $ )=> void ) } ) {\n\t\t\n\t\tfor( let name in set ) {\n\n\t\t\tconst code = set[ name ]\n\t\t\tconst test = ( typeof code === 'string' ) ? new Function( '' , code ) as ()=> void : code\n\t\t\t\n\t\t\t$mol_test_all.push( test )\n\t\t}\n\n\t\t$mol_test_schedule()\n\t}\n\n\texport let $mol_test_mocks = [] as Array< ( context : $ )=> void >\n\n\texport const $mol_test_all = [] as Array< ( context : $ )=> void >\n\n\texport async function $mol_test_run() {\n\n\t\tfor( var test of $mol_test_all ) {\n\n\t\t\tlet context = Object.create( $$ )\n\t\t\tfor( let mock of $mol_test_mocks ) await mock( context )\n\t\t\t\n\t\t\tawait test( context )\n\t\t}\n\t\t\n\t\t$mol_ambient({}).$mol_log3_done({\n\t\t\tplace : '$mol_test' , \n\t\t\tmessage : 'Completed' ,\n\t\t\tcount : $mol_test_all.length ,\n\t\t})\n\t\t\n\t}\n\t\n\tlet scheduled = false\n\texport function $mol_test_schedule() {\n\n\t\tif( scheduled ) return\n\t\tscheduled = true\n\n\t\tsetTimeout( ()=> {\n\t\t\tscheduled = false\n \t\t\t$mol_test_run()\n\t\t} , 0 )\n\t\t\n\t}\n\n\n\t$mol_test_mocks.push( context => {\n\t\tlet seed = 0\n\n\t\tcontext.Math = Object.create( Math )\n\t\tcontext.Math.random = ()=> Math.sin( seed++ )\n\n\t\tconst forbidden = [ 'XMLHttpRequest' , 'fetch' ]\n\n\t\tfor( let api of forbidden ) {\n\t\t\tcontext[ api ] = new Proxy( function(){} , {\n\t\t\t\tget() {\n\t\t\t\t\t$mol_fail_hidden( new Error( `${ api } is forbidden in tests` ) )\n\t\t\t\t} ,\n\t\t\t\tapply() {\n\t\t\t\t\t$mol_fail_hidden( new Error( `${ api } is forbidden in tests` ) )\n\t\t\t\t} ,\n\t\t\t} )\n\t\t}\n\t\t\n\t} )\n\n\t$mol_test({\n\n\t\t'mocked Math.random'( $ ) {\n\t\t\tconsole.assert( $.Math.random() === 0 )\n\t\t\tconsole.assert( $.Math.random() === Math.sin(1) )\n\t\t} ,\n\n\t\t'forbidden XMLHttpRequest'( $ ) {\n\t\t\ttry {\n\t\t\t\tconsole.assert( void new $.XMLHttpRequest )\n\t\t\t} catch( error ) {\n\t\t\t\tconsole.assert( error.message === 'XMLHttpRequest is forbidden in tests' )\n\t\t\t}\n\t\t} ,\n\n\t\t'forbidden fetch'( $ ) {\n\t\t\ttry {\n\t\t\t\tconsole.assert( void $.fetch('') )\n\t\t\t} catch( error ) {\n\t\t\t\tconsole.assert( error.message === 'fetch is forbidden in tests' )\n\t\t\t}\n\t\t} ,\n\n\t})\n\n}\n",null,null,null,null,"/** @jsx $mol_jsx */\nnamespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make empty div'() {\n\t\t\t$mol_assert_equal( (<div/>).outerHTML , '<div></div>' )\n\t\t} ,\n\t\t\n\t\t'Define native field'() {\n\t\t\t\n\t\t\tconst dom = <input value='123' /> as HTMLInputElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<input value=\"123\">' )\n\t\t\t$mol_assert_equal( dom.value , '123' )\n\n\t\t} ,\n\t\t\n\t\t'Define classes'() {\n\t\t\t\n\t\t\tconst dom = <div class={ 'foo bar' } />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div class=\"foo bar\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define styles'() {\n\t\t\t\n\t\t\tconst dom = <div style={{ color : 'red' }} />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div style=\"color: red;\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define dataset'() {\n\t\t\t\n\t\t\tconst dom = <div dataset={{ foo : 'bar' }} />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div data-foo=\"bar\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define attributes'() {\n\t\t\t\n\t\t\tconst dom = <div lang=\"ru\" hidden />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div lang=\"ru\" hidden=\"\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define child nodes'() {\n\n\t\t\tconst dom =\n\t\t\t\t<div>\n\t\t\t\t\thello\n\t\t\t\t\t<strong>world</strong>\n\t\t\t\t\t!\n\t\t\t\t</div>\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div>hello<strong>world</strong>!</div>' )\n\n\t\t} ,\n\n\t\t'Function as component'() {\n\n\t\t\tconst Button = ( { hint } : { hint : string } , target : ()=> string ) => {\n\t\t\t\treturn <button title={ hint } >{ target() }</button>\n\t\t\t}\n\n\t\t\tconst dom = <Button id=\"/foo\" hint=\"click me\">{ ()=> 'hey!' }</Button>\n\n\t\t\t$mol_assert_equal( dom.outerHTML , '<button title=\"click me\" id=\"/foo\">hey!</button>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t// 'Standart classes as component'() {\n\n\t\t// \tconst dom = <HTMLButtonElement id=\"/foo\" title=\"click me\">hey!</HTMLButtonElement>\n\n\t\t// \t$mol_assert_equal( dom.outerHTML , '<button title=\"click me\" id=\"/foo\">hey!</button>' )\n\t\t\t\n\t\t// } ,\n\t\t\n\t\t'Nested guid generation'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<Bar id=\"/bar\">\n\t\t\t\t\t\t<img id=\"/icon\" />\n\t\t\t\t\t</Bar>\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props : {} , icon : Element )=> {\n\t\t\t\treturn <span>{ icon }</span>\n\t\t\t}\n\n\t\t\tconst dom = <Foo id=\"/foo\" />\n\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div id=\"/foo\"><span id=\"/foo/bar\"><img id=\"/foo/icon\"></span></div>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Fail on non unique ids'() {\n\n\t\t\tconst App = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<span id=\"/bar\" />\n\t\t\t\t\t<span id=\"/bar\" />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> <App id=\"/foo\" /> , 'JSX already has tag with id \"/bar\"' )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\texport let $mol_jsx_prefix = ''\n\n\texport let $mol_jsx_booked = null as null | Set< string >\n\t\n\texport let $mol_jsx_document : $mol_jsx.JSX.ElementClass['ownerDocument'] = {\n\t\tgetElementById : ()=> null ,\n\t\tcreateElement : ( name : string )=> $mol_dom_context.document.createElement( name )\n\t}\n\n\texport function $mol_jsx< Props extends { id? : string } , Children extends Array< Node | string > >(\n\t\tElem : string\n\t\t\t| ( ( props : Props , ... children : Children ) => Element )\n\t\t\t| typeof $mol_jsx_view ,\n\t\tprops : Props ,\n\t\t... childNodes : Children\n\t) : Element {\n\n\t\tconst id = props && props.id || ''\n\n\t\tif( $mol_jsx_booked ) {\n\t\t\tif( $mol_jsx_booked.has( id ) ) {\n\t\t\t\t$mol_fail( new Error( `JSX already has tag with id ${ JSON.stringify( id ) }` ) )\n\t\t\t} else {\n\t\t\t\t$mol_jsx_booked.add( id )\n\t\t\t}\n\t\t}\n\n\t\tconst guid = $mol_jsx_prefix + id\n\n\t\tlet node = guid && $mol_jsx_document.getElementById( guid )\n\n\t\tif( typeof Elem !== 'string' ) {\n\n\t\t\tif( 'prototype' in Elem ) {\n\n\t\t\t\tconst view : $mol_jsx_view = node && node[ Elem as any ] || new ( Elem as any )\n\t\t\t\t\n\t\t\t\tObject.assign( view , props )\n\t\t\t\tview[ Symbol.toStringTag ] = guid\n\t\t\t\t\n\t\t\t\tview.childNodes = childNodes\n\t\t\t\t\n\t\t\t\tif( !view.ownerDocument ) view.ownerDocument = $mol_jsx_document\n\t\t\t\t\n\t\t\t\tnode = view.valueOf()\n\t\t\t\t\n\t\t\t\tnode[ Elem as any ] = view\n\t\t\t\t\n\t\t\t\treturn node\n\n\t\t\t} else {\n\n\t\t\t\tconst prefix = $mol_jsx_prefix\n\t\t\t\tconst booked = $mol_jsx_booked\n\t\t\t\t\n\t\t\t\ttry {\n\t\n\t\t\t\t\t$mol_jsx_prefix = guid\n\t\t\t\t\t$mol_jsx_booked = new Set\n\t\n\t\t\t\t\treturn ( Elem as any )( props , ... childNodes )\n\t\t\t\t\t\n\t\t\t\t} finally {\n\n\t\t\t\t\t$mol_jsx_prefix = prefix\n\t\t\t\t\t$mol_jsx_booked = booked\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t}\n\n\t\tif( !node ) node = $mol_jsx_document.createElement( Elem )\n\n\t\t$mol_dom_render_children( node , ( [] as ( Node | string )[] ).concat( ... childNodes ) )\n\n\t\tfor( const key in props ) {\n\n\t\t\tif( typeof props[ key ] === 'string' ) {\n\n\t\t\t\tnode.setAttribute( key , props[ key as any ] )\n\n\t\t\t} else if(\n\t\t\t\tprops[ key ] &&\n\t\t\t\ttypeof props[ key ] === 'object' &&\n\t\t\t\tReflect.getPrototypeOf( props[ key ] as any ) === Reflect.getPrototypeOf({})\n\t\t\t) {\n\n\t\t\t\tif( typeof node[ key as any ] === 'object' ) {\n\t\t\t\t\tObject.assign( ( node as any )[ key ] , props[ key ] )\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnode[ key as any ] = props[ key ]\n\n\t\t}\n\n\t\tif( guid ) node.id = guid\n\n\t\treturn node\n\n\t}\n\n\texport declare namespace $mol_jsx.JSX {\n\n\t\texport interface Element extends HTMLElement {\n\t\t\tclass?: string\n\t\t}\n\t\t\n\t\texport interface ElementClass {\n\t\t\tattributes : {}\n\t\t\townerDocument : Pick< Document , 'getElementById' | 'createElement' >\n\t\t\tchildNodes : Array< Node | string >\n\t\t\tvalueOf() : Element\n\t\t}\n\t\t\n\t\t/** Props for html elements */\n\t\texport type IntrinsicElements = {\n\t\t\t[ key in keyof HTMLElementTagNameMap ]? : $.$mol_type_partial_deep< Element & HTMLElementTagNameMap[ key ] >\n\t\t}\n\t\t\n\t\t/** Additional undeclared props */\n\t\texport interface IntrinsicAttributes {\n\t\t\tid? : string\n\t\t}\n\t\t\n\t\texport interface ElementAttributesProperty {\n\t\t\tattributes : {\n\t\t\t}\n\t\t}\n\t\t\n\t\t// export type IntrinsicClassAttributes< Class > = $.$mol_type_partial_deep< Omit< Class , 'valueOf' > >\n\t\t\n\t\tinterface ElementChildrenAttribute {\n\t\t}\n\t\n\t}\n\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\n\t$mol_test({\n\n\t\t'nulls & undefineds'() {\n\n\t\t\t$mol_assert_ok( $mol_compare_deep( null , null ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( undefined , undefined ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( undefined , null ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( {} , null ) )\n\t\t\t\n\t\t} ,\n\n\t\t'number'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( 1 , 1 ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( Number.NaN , Number.NaN ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( 1 , 2 ) )\n\t\t} ,\n\n\t\t'Number'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( Object( 1 ) , Object( 1 ) ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( Object( Number.NaN ) , Object( Number.NaN ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( Object( 1 ) , Object( 2 ) ) )\n\t\t} ,\n\n\t\t'empty POJOs'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( {} , {} ) )\n\t\t} ,\n\t\t\n\t\t'different POJOs'() {\n\t\t\t$mol_assert_not( $mol_compare_deep( { a : 1 } , { b : 2 } ) )\n\t\t} ,\n\n\t\t'different POJOs with same keys but different values'() {\n\t\t\t$mol_assert_not( $mol_compare_deep( { a : 1 } , { a : 2 } ) )\n\t\t} ,\n\n\t\t'different POJOs with different keys but same values'() {\n\t\t\t$mol_assert_not( $mol_compare_deep( {} , { a : undefined } ) )\n\t\t} ,\n\n\t\t'Array'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( [] , [] ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( [ 1 , [2] ] , [ 1 , [2] ] ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( [ 1 , 2 ] , [ 1 , 3 ] ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( [ 1 , 2 , ] , [ 1 , 3 , undefined ] ) )\n\t\t} ,\n\n\t\t'same POJO trees'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( { a : { b : 1 } } , { a : { b : 1 } } ) )\n\t\t} ,\n\n\t\t'different classes with same values'() {\n\n\t\t\tclass Obj { foo = 1 }\n\t\t\t\n\t\t\tconst a = new Obj\n\t\t\tconst b = new class extends Obj {}\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( a , b ) )\n\n\t\t} ,\n\n\t\t'same POJOs with cyclic reference'() {\n\n\t\t\tconst a = { foo : {} }\n\t\t\ta['self'] = a\n\n\t\t\tconst b = { foo : {} }\n\t\t\tb['self'] = b\n\n\t\t\t$mol_assert_ok( $mol_compare_deep( a , b ) )\n\n\t\t} ,\n\n\t\t'empty Element'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( <div /> , <div /> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div /> , <span /> ) )\n\t\t} ,\n\t\t\n\t\t'Element with attributes'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( <div dir=\"rtl\" /> , <div dir=\"rtl\" /> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div dir=\"rtl\" /> , <div /> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div dir=\"rtl\" /> , <div dir=\"ltr\" /> ) )\n\t\t} ,\n\t\t\n\t\t'Element with styles'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( <div style={{ color : 'red' }} /> , <div style={{ color : 'red' }} /> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div style={{ color : 'red' }} /> , <div style={{ }} /> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div style={{ color : 'red' }} /> , <div style={{ color : 'blue' }} /> ) )\n\t\t} ,\n\t\t\n\t\t'Element with content'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( <div>foo<br/></div> , <div>foo<br/></div> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div>foo<br/></div> , <div>bar<br/></div> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div>foo<br/></div> , <div>foo<hr/></div> ) )\n\t\t} ,\n\t\t\n\t\t'Element with handlers'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( <div onclick={ ()=> 1 } /> , <div onclick={ ()=> 1 } /> ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( <div onclick={ ()=> 1 } /> , <div onclick={ ()=> 2 } /> ) )\n\t\t} ,\n\t\t\n\t\t'Date'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Date( 12345 ) , new Date( 12345 ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Date( 12345 ) , new Date( 12346 ) ) )\n\t\t} ,\n\n\t\t'RegExp'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( /\\x22/mig , /\\x22/mig ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( /\\x22/mig , /\\x21/mig ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( /\\x22/mig , /\\x22/mg ) )\n\t\t} ,\n\n\t\t'Map'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map , new Map ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map([ [ [1] , [2] ] ]) , new Map([ [ [1] , [2] ] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Map([ [ 1 , 2 ] ]) , new Map([ [ 1 , 3 ] ]) ) )\n\t\t} ,\n\t\t\n\t\t'Set'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Set , new Set ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Set([ 1 , [2] ]) , new Set([ 1 , [2] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Set([ 1 ]) , new Set([ 2 ]) ) )\n\t\t} ,\n\t\t\n\t\t'Uint8Array'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Uint8Array , new Uint8Array ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Uint8Array([ 0 ]) , new Uint8Array([ 0 ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Uint8Array([ 0 ]) , new Uint8Array([ 1 ]) ) )\n\t\t} ,\n\t\t\n\t})\n\n}\n","namespace $ {\n\n\tconst a_stack = [] as any[]\n\tconst b_stack = [] as any[]\n\n\tlet cache = null as null | WeakMap< any , WeakMap< any , boolean > >\n\n\texport function $mol_compare_deep< Value >( a : Value , b : Value ) : boolean {\n\n\t\tif( Object.is( a , b ) ) return true\n\n\t\tconst a_type = typeof a\n\t\tconst b_type = typeof b\n\n\t\tif( a_type !== b_type ) return false\n\n\t\tif( a_type === 'function' ) return a['toString']() === b['toString']()\n\t\tif( a_type !== 'object' ) return false\n\n\t\tif( !a || !b ) return false\n\n\t\tif( a instanceof Error ) return false\n\t\tif( a['constructor'] !== b['constructor'] ) return false\n\n\t\tif( a instanceof RegExp ) return a.toString() === b['toString']()\n\n\t\tconst ref = a_stack.indexOf( a )\n\t\t\n\t\tif( ref >= 0 ) {\n\t\t\treturn Object.is( b_stack[ ref ] , b )\n\t\t}\n\n\t\tif( !cache ) cache = new WeakMap\n\n\t\tlet a_cache = cache.get( a )\n\t\tif( a_cache ) {\n\n\t\t\tconst b_cache = a_cache.get( b )\n\t\t\tif( typeof b_cache === 'boolean' ) return b_cache\n\n\t\t} else {\n\n\t\t\ta_cache = new WeakMap< any , boolean >()\n\t\t\tcache.set( a , a_cache )\n\n\t\t}\n\n\t\ta_stack.push( a )\n\t\tb_stack.push( b )\n\n\t\tlet result! : boolean\n\n\t\ttry {\n\n\t\t\tif( Symbol.iterator in a ) {\n\t\t\t\t\n\t\t\t\tconst a_iter = a[ Symbol.iterator ]()\n\t\t\t\tconst b_iter = b[ Symbol.iterator ]()\n\t\n\t\t\t\twhile( true ) {\n\n\t\t\t\t\tconst a_next = a_iter.next()\n\t\t\t\t\tconst b_next = b_iter.next()\n\n\t\t\t\t\tif( a_next.done !== b_next.done ) return result = false\n\t\t\t\t\tif( a_next.done ) break\n\n\t\t\t\t\tif( !$mol_compare_deep( a_next.value , b_next.value ) ) return result = false\n\n\t\t\t\t}\n\n\t\t\t\treturn result = true\n\n\t\t\t}\n\n\t\t\tlet count = 0\n\n\t\t\tfor( let key in a ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tif( !$mol_compare_deep( a[key] , b[key] ) ) return result = false\n\t\t\t\t\n\t\t\t\t} catch( error ) {\n\n\t\t\t\t\t$mol_fail_hidden( new $mol_error_mix( `Failed ${ JSON.stringify( key ) } fields comparison of ${a} and ${b}` , error ) )\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t++ count\n\n\t\t\t}\n\t\n\t\t\tfor( let key in b ) {\n\n\t\t\t\t--count\n\t\t\t\t\n\t\t\t\tif( count < 0 ) return result = false\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif( a instanceof Number || a instanceof String || a instanceof Symbol || a instanceof Boolean || a instanceof Date ) {\n\t\t\t\tif( !Object.is( a['valueOf'](), b['valueOf']() ) ) return result = false\n\t\t\t}\n\n\t\t\treturn result = true\n\n\t\t} finally {\n\t\t\t\n\t\t\ta_stack.pop()\n\t\t\tb_stack.pop()\n\n\t\t\tif( a_stack.length === 0 ) {\n\t\t\t\tcache = null\n\t\t\t} else {\n\t\t\t\ta_cache.set( b , result )\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'two must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'three must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'two must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'two must be alike'() {\n\t\t\t$mol_assert_like( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be alike'() {\n\t\t\t$mol_assert_like( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\t$mol_fail( new Error( `${value} ≠ true` ) )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\t$mol_fail( new Error( `${value} ≠ false` ) )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\t\n\t\tconst fail = $.$mol_fail\n\t\t\n\t\ttry {\n\t\t\t$.$mol_fail = $.$mol_fail_hidden\n\t\t\t\n\t\t\thandler()\n\n\t\t} catch( error ) {\n\t\t\t\n\t\t\tif( !ErrorRight ) return error\n\t\t\t\n\t\t\t$.$mol_fail = fail\n\n\t\t\tif( typeof ErrorRight === 'string' ) {\n\t\t\t\t$mol_assert_equal( error.message, ErrorRight )\n\t\t\t} else {\n\t\t\t\t$mol_assert_ok( error instanceof ErrorRight )\n\t\t\t}\n\t\t\t\n\t\t\treturn error\n\n\t\t} finally {\n\t\t\t$.$mol_fail = fail\n\t\t}\n\n\t\t$mol_fail( new Error( 'Not failed' ) )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( ... args : [ Value, Value, ...Value[] ] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) continue\n\t\t\t\tif( args[i] !== args[j] ) $mol_fail( new Error( `Not equal (${i+1}:${j+1})\\n${ args[i] }\\n${ args[j] }` ) )\n\t\t\t}\n\t\t}\n\t}\n\t\n\texport function $mol_assert_unique( ... args : [ any, any, ...any[] ] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( args[i] === args[j] || ( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) ) {\n\t\t\t\t\t$mol_fail( new Error( `args[${ i }] = args[${ j }] = ${ args[i] }` ) )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\texport function $mol_assert_like< Value >( head : Value, ... tail : Value[]) {\n\t\tfor( let [ index, value ] of Object.entries( tail ) ) {\n\n\t\t\tif( !$mol_compare_deep( value , head ) ) {\n\n\t\t\t\tconst print = ( val : any ) => {\n\t\t\t\t\t\n\t\t\t\t\tif( !val ) return val\n\t\t\t\t\tif( typeof val !== 'object' ) return val\n\t\t\t\t\tif( 'outerHTML' in val ) return val.outerHTML\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn JSON.stringify( val )\n\t\t\t\t\t} catch( error ) {\n\t\t\t\t\t\tconsole.error( error )\n\t\t\t\t\t\treturn val\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn $mol_fail( new Error( `Not like (1:${ + index + 2 })\\n${ print( head ) }\\n---\\n${ print( value ) }` ) )\n\n\t\t\t}\n\n\t\t}\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'is_new'() {\n\t\t\t\n\t\t\tconst clock = new $hyoo_crowd_clock\n\t\t\tclock.feed( 1_000_001 )\n\t\t\tclock.feed( -2_000_002 )\n\t\t\t\n\t\t\t$mol_assert_ok( clock.is_new( -2_000_003 ) )\n\t\t\t$mol_assert_ok( clock.is_new( 2_000_003 ) )\n\t\t\t$mol_assert_ok( clock.is_new( 3_000_001 ) )\n\t\t\t\n\t\t\t$mol_assert_not( clock.is_new( 1_000_002 ) )\n\t\t\t$mol_assert_not( 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'fork'() {\n\t\t\t\n\t\t\tconst left = new $hyoo_crowd_clock(1)\n\t\t\tleft.feed( 1_000_001 )\n\t\t\tleft.feed( -2_000_002 )\n\t\t\t\n\t\t\tconst right = left.fork(2)\n\t\t\t\n\t\t\t$mol_assert_equal( right.version_max, 2_000_002 )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... right.saw_versions ],\n\t\t\t\t[\n\t\t\t\t\t[ 1, 1_000_001 ],\n\t\t\t\t\t[ 2, 2_000_002 ],\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'generate'() {\n\t\t\t\n\t\t\tconst clock = new $hyoo_crowd_clock(1)\n\t\t\tclock.feed( 1_000_001 )\n\t\t\tclock.feed( -2_000_002 )\n\t\t\t\n\t\t\tconst stamp = clock.generate()\n\t\t\t\n\t\t\t$mol_assert_equal( stamp, 3_000_001 )\n\t\t\t$mol_assert_equal( clock.version_max, 3_000_001 )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... clock.saw_versions ],\n\t\t\t\t[\n\t\t\t\t\t[ 1, 3_000_001 ],\n\t\t\t\t\t[ 2, 2_000_002 ],\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'is_ahead'() {\n\t\t\t\n\t\t\tconst clock1 = new $hyoo_crowd_clock\n\t\t\tclock1.feed( 1_000_001 )\n\t\t\tclock1.feed( -2_000_002 )\n\t\t\t\n\t\t\tconst clock2 = new $hyoo_crowd_clock\n\t\t\tclock2.feed( 1_000_001 )\n\t\t\tclock2.feed( -2_000_003 )\n\t\t\t\n\t\t\tconst clock3 = new $hyoo_crowd_clock\n\t\t\tclock3.feed( 1_000_001 )\n\t\t\tclock3.feed( 2_000_002 )\n\t\t\tclock3.feed( 2_000_003 )\n\t\t\t\n\t\t\t$mol_assert_ok( clock1.is_ahead( clock2 ) )\n\t\t\t$mol_assert_ok( clock2.is_ahead( clock1 ) )\n\t\t\t\n\t\t\t$mol_assert_ok( clock3.is_ahead( clock1 ) )\n\t\t\t$mol_assert_ok( clock3.is_ahead( clock2 ) )\n\t\t\t\n\t\t\t$mol_assert_not( clock1.is_ahead( clock3 ) )\n\t\t\t$mol_assert_not( clock2.is_ahead( clock3 ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Default state'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_reg()\n\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta([],[]) )\n\t\t\t$mol_assert_like( store.value(), null )\n\t\t\t$mol_assert_like( store.version, 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Serial changes'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_reg().fork(1)\n\t\t\tstore.str( 'foo' )\n\t\t\tstore.str( 'bar' )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'bar' ],\n\t\t\t\t\t[ +2000001 ],\n\t\t\t\t)\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Ignore same changes'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_reg().fork(1)\n\t\t\tstore.str( 'foo' )\n\t\t\tstore.str( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo' ],\n\t\t\t\t\t[ +1000001 ],\n\t\t\t\t)\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Slice after version'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_reg().fork(1)\n\t\t\t\n\t\t\tstore.str( 'foo' )\n\t\t\tconst clock1 = store.clock.fork(0)\n\t\t\t\n\t\t\tstore.str( 'bar' )\n\t\t\tconst clock2 = store.clock.fork(0)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta( clock1 ),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'bar' ],\n\t\t\t\t\t[ +2000001 ],\n\t\t\t\t)\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like( store.delta( clock2 ), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Cuncurrent changes'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_reg().fork(1)\n\t\t\tbase.str( 'foo' )\n\t\t\t\n\t\t\tconst left = base.fork(2)\n\t\t\tleft.str( 'bar' )\n\t\t\t\n\t\t\tconst right = base.fork(3)\n\t\t\tright.str( 'xxx' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t{\n\t\t\t\t\tvalues: [ 'xxx' ],\n\t\t\t\t\tstamps: [ +2000003 ],\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Default state'() {\n\t\t\t\n\t\t\tconst val = new $hyoo_crowd_numb()\n\t\t\t\n\t\t\t$mol_assert_like( val.delta(), $hyoo_crowd_delta([],[]) )\n\t\t\t$mol_assert_like( val.numb(), 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Serial changes'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_numb().fork(1).shift( +5 ).shift( -3 )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta(\n\t\t\t\t[ +2 ],\n\t\t\t\t[ +2000001 ],\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_like( store.numb(), 2 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Slice after version'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_numb()\n\t\t\t\n\t\t\tconst store1 = store.fork(1).shift( +5 )\n\t\t\tconst clock1 = store1.clock.fork(0)\n\t\t\t\n\t\t\tstore1.shift( -3 )\n\t\t\tconst clock2 = store1.clock.fork(0)\n\t\t\t\n\t\t\tconst store2 = store1.fork(2).shift( -2 )\n\t\t\tconst clock3 = store2.clock.fork(0)\n\n\t\t\t$mol_assert_like( store2.delta( clock1 ), $hyoo_crowd_delta(\n\t\t\t\t[ +2, -2 ],\n\t\t\t\t[ +2000001, +3000002 ],\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_like( store2.delta( clock2 ), $hyoo_crowd_delta(\n\t\t\t\t[ -2 ],\n\t\t\t\t[ +3000002 ],\n\t\t\t ) )\n\t\t\t\n\t\t\t$mol_assert_like( store2.delta( clock3 ), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Concurrent changes'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_numb().fork(1).shift( +5 )\n\t\t\t\n\t\t\tconst left = base.fork(2).shift( +3 ).shift( +1 )\n\t\t\tconst right = base.fork(3).shift( -2 ).shift( +1 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.numb(),\n\t\t\t\tright.numb(),\n\t\t\t\t8,\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t/** CROWD Counter */\n\texport class $hyoo_crowd_numb extends $hyoo_crowd_store {\n\t\t\n\t\tstores = new Map< number, $hyoo_crowd_reg >()\n\t\t\n\t\tvalue() {\n\t\t\t\n\t\t\tlet res = 0\n\t\t\t\n\t\t\tfor( const store of this.stores.values() ) {\n\t\t\t\tres += store.numb()\n\t\t\t}\n\t\t\t\n\t\t\treturn res\n\t\t}\n\t\t\n\t\tnumb() {\n\t\t\treturn this.value()\n\t\t}\n\t\t\n\t\tdelta( clock = new $hyoo_crowd_clock ) {\n\t\t\t\n\t\t\tconst delta = $hyoo_crowd_delta([],[])\n\t\t\t\n\t\t\tfor( const store of this.stores.values() ) {\n\t\t\t\t\n\t\t\t\tconst patch = store.delta( clock )\n\t\t\t\tif( patch.values.length === 0 ) continue\n\t\t\t\t\n\t\t\t\tdelta.values.push( ... patch.values )\n\t\t\t\tdelta.stamps.push( ... patch.stamps )\n\t\t\t}\n\t\t\t\n\t\t\treturn delta\n\t\t}\n\t\t\n\t\treg( path: number ) {\n\t\t\t\n\t\t\tlet store = this.stores.get( path )\n\t\t\tif( store ) return store\n\t\t\t\n\t\t\tstore = new $hyoo_crowd_reg( this.clock )\n\t\t\tthis.stores.set( path, store )\n\t\t\t\n\t\t\treturn store\n\t\t}\n\t\t\n\t\tshift( diff = 1 ) {\n\t\t\t\n\t\t\tconst store = this.reg( this.clock.peer )\n\t\t\tconst prev = Number( store.numb() )\n\t\t\t\n\t\t\tstore.numb( prev + diff )\n\t\t\t\n\t\t\treturn this\n\t\t}\n\t\t\n\t\tapply(\n\t\t\tdelta: ReturnType< typeof $hyoo_crowd_delta >,\n\t\t) {\n\t\t\t\n\t\t\tfor( let i = 0 ; i < delta.values.length; ++ i ) {\n\t\t\t\t\n\t\t\t\tconst peer = this.clock.peer_from( delta.stamps[i] )\n\t\t\t\t\n\t\t\t\tthis.reg( peer ).apply(\n\t\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t\t[ delta.values[i] ],\n\t\t\t\t\t\t[ delta.stamps[i] ],\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn this\n\t\t}\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Add keys'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_set().fork(1).add( 'foo' ).add( 'bar' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'bar' ],\n\t\t\t\t\t[ +1000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Slice after version'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_set().fork(1)\n\t\t\t\n\t\t\tstore.add( 'foo' )\n\t\t\tconst clock1 = store.clock.fork(0)\n\t\t\t\n\t\t\tstore.add( 'bar' )\n\t\t\tconst clock2 = store.clock.fork(0)\n\t\t\t\n\t\t\t$mol_assert_like( store.delta( clock1 ), $hyoo_crowd_delta(\n\t\t\t\t[ 'bar' ],\n\t\t\t\t[ +2000001 ],\n\t\t\t ) )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta( clock2 ), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Ignore existen keys'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_set().fork(1).add( 'foo' ).add( 'foo' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo' ],\n\t\t\t\t\t[ +1000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Partial remove keys'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_set().fork(1).add( 'foo' ).add( 'bar' ).remove( 'foo' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'bar' ],\n\t\t\t\t\t[ -3000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Ignore already removed keys'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_set().fork(1).add( 'foo' ).remove( 'foo' ).remove( 'foo' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo' ],\n\t\t\t\t\t[ -2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Convert to native Set'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_set().fork(1).add( 'foo' ).add( 'xxx' ).remove( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_like( store.items, [ \"xxx\" ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Merge different sets'() {\n\t\t\t\n\t\t\tconst left = new $hyoo_crowd_set().fork(2).add( 'foo' ).add( 'bar' )\n\t\t\tconst right = new $hyoo_crowd_set().fork(3).add( 'xxx' ).add( 'yyy' ).remove( 'xxx' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).items.sort(),\n\t\t\t\tright.apply( left_delta ).items.sort(),\n\t\t\t\t[ 'bar', 'foo', 'yyy' ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Merge branches with common base'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_set().fork(1).add( 'foo' ).add( 'bar' )\n\t\t\t\n\t\t\tconst left = base.fork(2).add( 'xxx' )\n\t\t\tconst right = base.fork(3).remove( 'foo' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).items.sort(),\n\t\t\t\tright.apply( left_delta ).items.sort(),\n\t\t\t\t[ 'bar', 'xxx' ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Concurrent Add and Remove'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_set().fork(1).add( 'foo' )\n\t\t\t\n\t\t\tconst left = base.fork(2).add( 'foo' ).remove( 'bar' )\n\t\t\tconst right = base.fork(3).remove( 'foo' ).add( 'bar' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).items.sort(),\n\t\t\t\tright.apply( left_delta ).items.sort(),\n\t\t\t\t[ 'bar' ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Number ids support'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_set().fork(1).add( 1 ).add( 2 ).add( 2 ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 1, 2 ],\n\t\t\t\t\t[ +1000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t/** CROWD Unordered Set */\n\texport class $hyoo_crowd_set extends $hyoo_crowd_store {\n\t\t\n\t\tprotected readonly stamps = new Map< $hyoo_crowd_delta_value, number >()\n\t\t\n\t\tget count() {\n\t\t\treturn this.items.length\n\t\t}\n\t\t\n\t\tget items() {\n\t\t\tconst delta = this.delta()\n\t\t\treturn delta.values.filter(\n\t\t\t\t( _, index )=> delta.stamps[ index ] > 0\n\t\t\t)\n\t\t}\n\t\t\n\t\thas( val: $hyoo_crowd_delta_value ) {\n\t\t\treturn this.stamps.get( val )! > 0\n\t\t}\n\t\t\n\t\tversion_item( val: $hyoo_crowd_delta_value ) {\n\t\t\treturn this.clock.version_from( this.stamps.get( val ) ?? 0 )\n\t\t}\n\t\t\n\t\tdelta( clock = new $hyoo_crowd_clock ) {\n\t\t\t\n\t\t\tconst delta = $hyoo_crowd_delta([],[])\n\t\t\t\n\t\t\tfor( const [ key, stamp ] of this.stamps ) {\n\t\t\t\t\n\t\t\t\tif( !clock.is_new( stamp ) ) continue\n\t\t\t\t\n\t\t\t\tdelta.values.push( key )\n\t\t\t\tdelta.stamps.push( stamp )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn delta\n\t\t}\n\t\t\n\t\tadd(\n\t\t\tkey: $hyoo_crowd_delta_value,\n\t\t) {\n\t\t\t\n\t\t\tif( this.has( key ) ) return this\n\t\t\t\n\t\t\tthis.apply( $hyoo_crowd_delta(\n\t\t\t\t[ key ],\n\t\t\t\t[ this.clock.generate() ],\n\t\t\t) )\n\t\t\t\n\t\t\treturn this\n\t\t}\n\t\t\n\t\tremove(\n\t\t\tkey: $hyoo_crowd_delta_value\n\t\t) {\n\t\t\t\n\t\t\tif( !this.has( key ) ) return this\n\t\t\t\n\t\t\tthis.apply( $hyoo_crowd_delta(\n\t\t\t\t[ key ],\n\t\t\t\t[ - this.clock.generate() ],\n\t\t\t) )\n\t\t\t\n\t\t\treturn this\n\t\t}\n\t\t\n\t\tapply(\n\t\t\tdelta: ReturnType< typeof $hyoo_crowd_delta >,\n\t\t) {\n\t\t\t\n\t\t\tfor( let i = 0; i < delta.values.length; ++i ) {\n\t\t\t\t\n\t\t\t\tconst key = delta.values[i]\n\t\t\t\tconst stamp = delta.stamps[i]\n\t\t\t\t\n\t\t\t\tconst version = this.clock.version_from( stamp )\n\t\t\t\tif( this.version_item( key ) >= version ) continue\n\t\t\t\t\n\t\t\t\tthis.stamps.set( key, stamp )\n\t\t\t\tthis.clock.feed( version )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn this\n\t\t}\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Put values to end'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'bar' ],\n\t\t\t\t\t[ +1000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Ignore existen values'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'foo' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo' ],\n\t\t\t\t\t[ +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Slice after version'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_list().fork(1)\n\t\t\t\n\t\t\tstore.insert( 'foo' )\n\t\t\tconst clock1 = store.clock.fork(0)\n\t\t\t\n\t\t\tstore.insert( 'bar' )\n\t\t\tconst clock2 = store.clock.fork(0)\n\n\t\t\t$mol_assert_like( store.delta( clock1 ), $hyoo_crowd_delta(\n\t\t\t\t[ 'foo', 'bar' ],\n\t\t\t\t[ +1000001, +2000001 ],\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta( clock2 ), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Put value to the middle'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' ).insert( 'xxx', 1 ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'xxx', 'bar' ],\n\t\t\t\t\t[ +1000001, +3000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Put value to the start'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar', 0 ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'bar', 'foo' ],\n\t\t\t\t\t[ +2000001, +1000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Partial cut values'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' ).cut( 'foo' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'bar', 'foo' ],\n\t\t\t\t\t[ +2000001, -3000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Ignore already cutted values'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 'foo' ).cut( 'foo' ).cut( 'foo' ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo' ],\n\t\t\t\t\t[ -2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Convert to native array'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_list().fork(1)\n\t\t\t.insert( 'foo' )\n\t\t\t.insert( 'bar', 0 )\n\t\t\t.insert( 'xxx' )\n\t\t\t.cut( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_like( store.items(), [ \"bar\", \"xxx\" ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Insert by native array'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_list().fork(1)\n\t\t\t.insert( 'foo' )\n\t\t\t.insert( 'bar' )\n\t\t\t\n\t\t\tstore.items([ 'foo', 'xxx', 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'xxx', 'bar' ],\n\t\t\t\t\t[ 1000001, 3000001, 2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Remove by native array'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_list().fork(1)\n\t\t\t.insert( 'foo' )\n\t\t\t.insert( 'xxx' )\n\t\t\t.insert( 'bar' )\n\t\t\t\n\t\t\tstore.items([ 'foo', 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'bar', 'xxx' ],\n\t\t\t\t\t[ 1000001, 3000001, -4000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Replace by native array'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_list().fork(1)\n\t\t\t.insert( 'foo' )\n\t\t\t.insert( 'xxx' )\n\t\t\t.insert( 'bar' )\n\t\t\t\n\t\t\tstore.items([ 'foo', 'yyy', 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'yyy', 'bar', 'xxx' ],\n\t\t\t\t\t[ 1000001, 5000001, 3000001, -4000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Reorder by native array'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_list().fork(1)\n\t\t\t.insert( 'foo' )\n\t\t\t.insert( 'xxx' )\n\t\t\t.insert( 'bar' )\n\t\t\t\n\t\t\tstore.items([ 'foo', 'bar', 'xxx' ])\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'bar', 'xxx' ],\n\t\t\t\t\t[ 1000001, 3000001, 5000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Merge different sequences'() {\n\t\t\t\n\t\t\tconst left = new $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' )\n\t\t\tconst right = new $hyoo_crowd_list().fork(2).insert( 'xxx' ).insert( 'yyy' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'xxx', 'yyy', 'foo', 'bar' ],\n\t\t\t\t\t[ +1000002, +2000002, +1000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Insert in the same place'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' )\n\t\t\t\n\t\t\tconst left = base.fork(2).insert( 'xxx', 1 )\n\t\t\tconst right = base.fork(3).insert( 'yyy', 1 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'yyy', 'xxx', 'bar' ],\n\t\t\t\t\t[ +1000001, +3000003, +3000002, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Insert after moved'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' )\n\t\t\t\n\t\t\tconst left = base.fork(2).insert( 'xxx', 1 )\n\t\t\tconst right = base.fork(3).insert( 'foo', 2 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'xxx', 'bar', 'foo' ],\n\t\t\t\t\t[ +3000002, +2000001, +3000003 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Insert after cutted'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_list().fork(1).insert( 'foo' ).insert( 'bar' )\n\t\t\t\n\t\t\tconst left = base.fork(2).insert( 'xxx', 1 )\n\t\t\tconst right = base.fork(3).cut( 'foo' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'xxx', 'bar', 'foo' ],\n\t\t\t\t\t[ +3000002, +2000001, -3000003 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Number ids support'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew $hyoo_crowd_list().fork(1).insert( 1 ).insert( 2 ).insert( 3, 1 ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 1, 3, 2 ],\n\t\t\t\t\t[ +1000001, +3000001, +2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Default state'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_union.of({\n\t\t\t\tcounter: $hyoo_crowd_numb,\n\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t}).make()\n\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta([],[]) )\n\t\t\t$mol_assert_like( store.type, null )\n\t\t\t$mol_assert_like( store.as( 'counter' ), null )\n\t\t\t$mol_assert_like( store.as( 'string' ), null )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Change type with default value'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_union.of({\n\t\t\t\tcounter: $hyoo_crowd_numb,\n\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t\tobject: $hyoo_crowd_set,\n\t\t\t\tarray: $hyoo_crowd_list,\n\t\t\t}).make()\n\t\t\t\n\t\t\tstore.to( 'counter' )\n\t\t\t\n\t\t\t$mol_assert_like( store.type, 'counter' )\n\t\t\t$mol_assert_like( store.as( 'counter' )!.numb(), 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Change value'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_union.of({\n\t\t\t\tcounter: $hyoo_crowd_numb,\n\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t\tobject: $hyoo_crowd_set,\n\t\t\t\tarray: $hyoo_crowd_list,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tstore.to( 'counter' )!.shift( +5 ).shift( -2 )\n\t\t\t\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta(\n\t\t\t\t[ 'counter', +3 ],\n\t\t\t\t[ -1000001, +3000001 ],\n\t\t\t) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Slice after version'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_union.of({\n\t\t\t\tcounter: $hyoo_crowd_numb,\n\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t\tobject: $hyoo_crowd_set,\n\t\t\t\tarray: $hyoo_crowd_list,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tstore.to( 'object' ).add( 'foo' )\n\t\t\tconst clock1 = store.clock.fork(0)\n\t\t\t\n\t\t\tstore.to( 'object' ).add( 'bar' )\n\t\t\tconst clock2 = store.clock.fork(0)\n\t\t\t\t\t\t\n\t\t\t$mol_assert_like( store.delta( clock1 ), $hyoo_crowd_delta(\n\t\t\t\t[ 'object', 'bar' ],\n\t\t\t\t[ -1000001, +3000001 ],\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta( clock2 ), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Reinterpret list as reg'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_union.of({\n\t\t\t\tcounter: $hyoo_crowd_numb,\n\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t\tobject: $hyoo_crowd_set,\n\t\t\t\tarray: $hyoo_crowd_list,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tstore.to( 'string' ).str( 'foo' )\n\t\t\tstore.to( 'string' ).str( 'bar' )\n\t\t\t$mol_assert_like( store.to( 'array' ).items(), [ 'bar' ] )\n\t\t\t\n\t\t\tstore.as( 'array' )!.insert( 'xxx' )\n\t\t\t$mol_assert_like( store.to( 'string' ).str(), 'xxx' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Cross merge list and register'() {\n\t\t\t\n\t\t\tconst base = $hyoo_crowd_union.of({\n\t\t\t\tcounter: $hyoo_crowd_numb,\n\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t\tobject: $hyoo_crowd_set,\n\t\t\t\tarray: $hyoo_crowd_list,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tbase.to( 'string' ).str( 'foo' )\n\t\t\t\n\t\t\tconst left = base.fork(2)\n\t\t\tleft.as( 'string' )!.str( 'bar' )\n\t\t\t\n\t\t\tconst right = base.fork(3)\n\t\t\tright.to( 'array' ).insert( 'xxx' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'array', 'bar', 'foo', 'xxx' ],\n\t\t\t\t\t[ -3000003, +3000002, +2000001, +4000003 ],\n\t\t\t\t),\n\t\t\t\t\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t/** CROWD Tagged Union */\n\texport class $hyoo_crowd_union<\n\t\tTypes extends Record< string, typeof $hyoo_crowd_store >\n\t> extends $hyoo_crowd_store {\n\t\t\n\t\tstatic of<\n\t\t\tTypes extends Record< string, typeof $hyoo_crowd_store >\n\t\t>(\n\t\t\tTypes: Types,\n\t\t) {\n\t\t\treturn class Union extends this<Types> {\n\t\t\t\tTypes = Types\n\t\t\t}\n\t\t}\n\t\t\n\t\tTypes!: Types\n\t\t\n\t\ttype_store = new $hyoo_crowd_reg_back( this.clock )\n\t\tvalue_store?: InstanceType< Types[string] >\n\t\t\n\t\tget type() {\n\t\t\tconst type = this.type_store.value()\n\t\t\treturn type as keyof Types | null\n\t\t}\n\t\t\n\t\tas< Type extends keyof Types >( type: Type ): InstanceType< Types[ Type ] > | null {\n\t\t\t\n\t\t\tif( this.type !== type ) return null\n\t\t\tif( this.value_store ) return this.value_store as InstanceType< Types[ Type ] >\n\t\t\t\n\t\t\treturn this.to( type )\n\t\t}\n\t\t\n\t\tto< Type extends keyof Types >( type: Type, stamp?: number ): InstanceType< Types[ Type ] > {\n\t\t\t\n\t\t\tif( this.type === type ) return this.as( type )!\n\t\t\t\n\t\t\tthis.type_store.apply(\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ type as string ],\n\t\t\t\t\t[ stamp || - this.clock.generate() ],\n\t\t\t\t)\n\t\t\t)\n\t\t\t\n\t\t\tif( this.type !== type ) return this.as( this.type! )! as any\n\t\t\t\n\t\t\tconst store = new this.Types[ type ]( this.clock )\n\t\t\tif( this.value_store ) store.apply( this.value_store.delta() )\n\t\t\t\n\t\t\treturn this.value_store = store as any\n\t\t}\n\t\t\n\t\tdelta( clock = new $hyoo_crowd_clock ) {\n\t\t\t\n\t\t\tconst val = this.value_store?.delta( clock )\n\t\t\tif( val?.values.length === 0 ) return $hyoo_crowd_delta([],[])\n\t\t\t\n\t\t\tconst type = this.type_store.delta()\n\t\t\t\n\t\t\treturn $hyoo_crowd_delta(\n\t\t\t\t[\n\t\t\t\t\t... type.values,\n\t\t\t\t\t... val?.values ?? [],\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t... type.stamps,\n\t\t\t\t\t... val?.stamps ?? [],\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t}\n\t\t\t\t\n\t\tapply(\n\t\t\tdelta: ReturnType< typeof $hyoo_crowd_delta >,\n\t\t) {\n\t\t\t\n\t\t\tif( delta.values.length === 0 ) return this\n\n\t\t\tlet type = delta.values[0] as Extract< keyof Types, string >\n\t\t\t\n\t\t\tif( !this.Types[ type ] ) {\n\t\t\t\ttype = Object.keys( this.Types )[0] as Extract< keyof Types, string >\n\t\t\t\tthis.to( type ).apply( delta )\n\t\t\t\treturn this\n\t\t\t}\n\t\t\t\n\t\t\tconst store = this.to( type, delta.stamps[0] )\n\t\t\t\n\t\t\tstore.apply(\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\tdelta.values.slice(1),\n\t\t\t\t\tdelta.stamps.slice(1),\n\t\t\t\t)\n\t\t\t)\n\t\t\t\n\t\t\treturn this\n\t\t}\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Register => Tagged Union'() {\n\t\t\t\n\t\t\tlet left = $hyoo_crowd_reg.make().fork(2)\n\t\t\t\n\t\t\tleft.numb( 777 )\n\t\t\tleft.numb( 123 )\n\t\t\t\n\t\t\tlet right = $hyoo_crowd_union.of({\n\t\t\t\tindex: $hyoo_crowd_reg,\n\t\t\t\tcount: $hyoo_crowd_reg,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tright.apply( left.delta() )\n\t\t\t\n\t\t\t$mol_assert_like( right.type, \"index\" )\n\t\t\t$mol_assert_like( right.as( 'index' )!.numb(), 123 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Tagged Union => Register'() {\n\t\t\t\n\t\t\tlet left = $hyoo_crowd_union.of({\n\t\t\t\tindex: $hyoo_crowd_reg,\n\t\t\t\tcount: $hyoo_crowd_reg,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tleft.to('index').numb( 777 )\n\t\t\tleft.to('count')\n\t\t\t\n\t\t\tlet right = $hyoo_crowd_reg.make().fork(2)\n\t\t\t\n\t\t\tright.apply( left.delta() )\n\t\t\t\n\t\t\t$mol_assert_like( right.numb(), 777 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Tagged Union => Counter'() {\n\t\t\t\n\t\t\tlet left = $hyoo_crowd_union.of({\n\t\t\t\tindex: $hyoo_crowd_reg,\n\t\t\t\tcount: $hyoo_crowd_reg,\n\t\t\t}).make().fork(1)\n\t\t\t\n\t\t\tleft.to('index').numb( 777 )\n\t\t\tleft.to('count')\n\t\t\t\n\t\t\tlet right = $hyoo_crowd_numb.make().fork(2)\n\t\t\t\n\t\t\tright.apply( left.delta() )\n\t\t\t\n\t\t\t$mol_assert_like( right.numb(), 777 )\n\t\t\t\n\t\t},\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'get'() {\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t$mol_assert_equal( proxy.foo , 777 )\n\t\t},\n\n\t\t'has'() {\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t$mol_assert_equal( 'foo' in proxy , true )\n\t\t},\n\n\t\t'set'() {\n\t\t\tconst target = { foo : 777 }\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> target )\n\t\t\tproxy.foo = 123\n\t\t\t$mol_assert_equal( target.foo , 123 )\n\t\t},\n\t\t\n\t\t'getOwnPropertyDescriptor'() {\n\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tObject.getOwnPropertyDescriptor( proxy , 'foo' ),\n\t\t\t\t{\n\t\t\t\t\tvalue: 777,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'ownKeys'() {\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} as any ,\n\t\t\t\t()=> ({ foo : 777 , [ Symbol.toStringTag ] : 'bar' }),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tReflect.ownKeys( proxy ),\n\t\t\t\t[ 'foo' , Symbol.toStringTag ],\n\t\t\t)\n\n\t\t},\n\n\t\t'getPrototypeOf'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} as any ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tObject.getPrototypeOf( proxy ),\n\t\t\t\tFoo.prototype,\n\t\t\t)\n\n\t\t},\n\n\t\t'setPrototypeOf'() {\n\n\t\t\tclass Foo {}\n\t\t\tconst target = {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> target,\n\t\t\t)\n\n\t\t\tObject.setPrototypeOf( proxy , Foo.prototype )\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tObject.getPrototypeOf( target ),\n\t\t\t\tFoo.prototype,\n\t\t\t)\n\n\t\t},\n\n\t\t'instanceof'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\n\t\t\t$mol_assert_ok( proxy instanceof Foo )\n\t\t\t$mol_assert_ok( proxy instanceof $mol_delegate )\n\n\t\t},\n\n\t\t'autobind'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\n\t\t\t$mol_assert_ok( proxy instanceof Foo )\n\t\t\t$mol_assert_ok( proxy instanceof $mol_delegate )\n\n\t\t},\n\n\t})\n}\n",null,"namespace $ {\n\n\t/// @todo right orderinng\n\texport let $mol_after_mock_queue = [] as ( ()=> void )[]\n\n\texport function $mol_after_mock_warp() {\n\t\tconst queue = $mol_after_mock_queue.splice( 0 )\n\t\tfor( const task of queue ) task()\n\t}\n\n\texport class $mol_after_mock_commmon extends $mol_object2 {\n\n\t\tpromise = Promise.resolve()\n\t\tcancelled = false\n\t\tid : any\n\n\t\tconstructor( public task : ()=> void ) {\n\t\t\tsuper()\n\t\t\t$mol_after_mock_queue.push( task )\n\t\t}\n\n\t\tdestructor() {\n\t\t\tconst index = $mol_after_mock_queue.indexOf( this.task )\n\t\t\tif( index >= 0 )$mol_after_mock_queue.splice( index , 1 )\n\t\t}\n\n\t}\n\n\texport class $mol_after_mock_timeout extends $mol_after_mock_commmon {\n\n\t\tconstructor(\n\t\t\tpublic delay : number ,\n\t\t\ttask : ()=> void ,\n\t\t) {\n\t\t\tsuper( task )\n\t\t}\n\n\t}\n\t\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_tick = $mol_after_mock_commmon as any as typeof $mol_after_tick\n\t})\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = X.make({\n\t\t\t\tfoo : ()=> 2 ,\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\t\n\t} )\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_log3_come = ()=> {}\n\t\t$.$mol_log3_done = ()=> {}\n\t\t$.$mol_log3_fail = ()=> {}\n\t\t$.$mol_log3_warn = ()=> {}\n\t\t$.$mol_log3_rise = ()=> {}\n\t\t$.$mol_log3_area = ()=> ()=> {}\n\t} )\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'run callback' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\t$mol_assert_equal( Plus1.run( ()=> 2 ) , 3 )\n\n\t\t} ,\n\n\t\t'wrap function' () {\n\t\t\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tconst obj = {\n\t\t\t\tlevel : 2 ,\n\t\t\t\tpow : Plus1.func( function( this : { level : number } , a ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\t$mol_assert_equal( obj.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate field getter' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\n\t\t\t\tstatic last = 0\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn Plus1.last = ( task.call( this , ... args ) || 0 ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo {\n\n\t\t\t\t@ Plus1.field\n\t\t\t\tstatic get two() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\tstatic set two( next : number ) {}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\t\t\t\n\t\t\tFoo.two = 3\n\t\t\t$mol_assert_equal( Plus1.last , 2 )\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\n\t\t} ,\n\n\t\t'decorate instance method' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo1 {\n\n\t\t\t\tlevel = 2\n\n\t\t\t\t@ Plus1.method\n\t\t\t\tpow( a : number ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tconst Foo2 = Foo1\n\t\t\tconst foo = new Foo2\n\n\t\t\t$mol_assert_equal( foo.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate static method' () {\n\t\t\t\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo {\n\n\t\t\t\tstatic level = 2\n\n\t\t\t\t@ Plus1.method\n\t\t\t\tstatic pow( a : number ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( Foo.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate class' () {\n\t\t\t\n\t\t\tclass BarInc extends $mol_wrapper {\n\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> Foo ) {\n\t\t\t\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\n\t\t\t\t\t\tconst foo = task.call( this , ...args )\n\t\t\t\t\t\tfoo.bar ++\n\t\t\t\t\t\treturn foo\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t@ BarInc.class\n\t\t\tclass Foo {\n\t\t\t\tconstructor( public bar : number ) {}\n\t\t\t}\n\n\t\t\t$mol_assert_equal( new Foo( 2 ).bar , 3 )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_frame = $mol_after_mock_commmon as any as typeof $mol_after_frame\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'objects by reference' () {\n\t\t\t$mol_assert_equal( $mol_compare_any( {} , {} ) , false )\n\t\t} ,\n\n\t\t'primitives by value' () {\n\t\t\t$mol_assert_equal( $mol_compare_any( 'a' , 'a' ) , true )\n\t\t} ,\n\n\t\t'NaN by value' () {\n\t\t\t$mol_assert_equal( $mol_compare_any( Number.NaN , Number.NaN ) , true )\n\t\t} ,\n\n\t\t'NaN not equal zero' () {\n\t\t\t$mol_assert_equal( $mol_compare_any( Number.NaN , 0 ) , false )\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'return source when same object'() {\n\t\t\tconst target = {}\n\t\t\t$mol_assert_equal( $mol_conform( target , target ) , target )\n\t\t} ,\n\n\t\t'return target when some is not object'() {\n\t\t\tconst obj = { a : 1 }\n\t\t\t$mol_assert_equal( $mol_conform( true , obj ) , true )\n\t\t\t$mol_assert_equal( $mol_conform( obj , true ) , obj )\n\t\t} ,\n\n\t\t'return target when some is null'() {\n\t\t\tconst obj = { a : 1 }\n\t\t\t$mol_assert_equal( $mol_conform( null , obj ) , null )\n\t\t\t$mol_assert_equal( $mol_conform( obj , null ) , obj )\n\t\t} ,\n\n\t\t'return target when some is undefined'() {\n\t\t\tconst obj = { a : 1 }\n\t\t\t$mol_assert_equal( $mol_conform( undefined , obj ) , undefined )\n\t\t\t$mol_assert_equal( $mol_conform( obj , undefined ) , obj )\n\t\t} ,\n\n\t\t'return target when different keys count'() {\n\t\t\tconst target = [ 1 , 2 , 3 ]\n\t\t\tconst source = [ 1 , 2 , 3 , undefined ]\n\t\t\tconst result = $mol_conform( target , source )\n\t\t\t\n\t\t\t$mol_assert_equal( result , target )\n\t\t\t$mol_assert_equal( result.join(',') , '1,2,3' )\n\t\t} ,\n\n\t\t'return source when array values are strong equal'() {\n\t\t\tconst source = [ 1 , 2 , 3 ]\n\t\t\t$mol_assert_equal( $mol_conform( [ 1 , 2 , 3 ] , source ) , source )\n\t\t} ,\n\n\t\t'return source when object values are strong equal'() {\n\t\t\tconst source = { a : 1 , b : 2 }\n\t\t\t$mol_assert_equal( $mol_conform( { a : 1 , b : 2 } , source ) , source )\n\t\t} ,\n\n\t\t'return target when some values are not equal'() {\n\t\t\tconst target = [ 1 , 2 , 3 ]\n\t\t\tconst source = [ 1 , 2 , 5 ]\n\t\t\tconst result = $mol_conform( target , source )\n\t\t\t\n\t\t\t$mol_assert_equal( result , target )\n\t\t\t$mol_assert_equal( result.join(',') , '1,2,3' )\n\t\t} ,\n\n\t\t'return source when values are deep equal'() {\n\t\t\tconst source = { foo : { bar : 1 } }\n\t\t\t$mol_assert_equal( $mol_conform( { foo : { bar : 1 } } , source ) , source )\n\t\t} ,\n\n\t\t'return target with equal values from source and not equal from target'() {\n\t\t\tconst source = { foo : { xxx : 1 } , bar : { xxx : 2 } }\n\t\t\tconst target = { foo : { xxx : 1 } , bar : { xxx : 3 } }\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , target )\n\t\t\t$mol_assert_equal( result.foo , source.foo )\n\t\t\t$mol_assert_equal( result.bar , target.bar )\n\t\t} ,\n\n\t\t'return target when equal but with different class'() {\n\t\t\tconst target = { '0' : 1 }\n\t\t\t$mol_assert_equal( $mol_conform( target , [ 1 ] ) , target )\n\t\t} ,\n\n\t\t'return target when conformer for class is not defined'() {\n\t\t\tconst Obj = class {}\n\n\t\t\tconst source = new Obj \n\t\t\tconst target = new Obj\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , target )\n\t\t} ,\n\n\t\t'return target when has cyclic reference'() {\n\t\t\tconst source = { foo : {} }\n\t\t\tsource['self'] = source\n\n\t\t\tconst target = { foo : {} }\n\t\t\ttarget['self'] = target\n\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , target )\n\t\t\t$mol_assert_equal( result['self'] , target )\n\t\t\t$mol_assert_equal( result.foo , source.foo )\n\t\t} ,\n\n\t\t'return source when equal dates'() {\n\t\t\tconst source = new Date( 12345 )\n\t\t\tconst target = new Date( 12345 )\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , source )\n\t\t} ,\n\n\t\t'return source when equal regular expressions'() {\n\t\t\tconst source = /\\x22/mig\n\t\t\tconst target = /\\x22/mig\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , source )\n\t\t} ,\n\t\t\n\t\t'return cached value if already conformed'() {\n\t\t\tconst source = { foo : { xxx : 1 } , bar : { xxx : 3 } }\n\t\t\tconst target = { foo : { xxx : 2 } , bar : { xxx : 3 } }\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\ttarget.foo.xxx = 1\n\t\t\t$mol_assert_equal( $mol_conform( target.foo , source.foo ) , target.foo )\n\t\t} ,\n\n\t\t'skip readlony fields'() {\n\t\t\tconst source = { foo : {} , bar : {} }\n\n\t\t\tconst target = { foo : {} , bar : {} }\n\t\t\tObject.defineProperty( target , 'bar' , { value : {} , writable : false } )\n\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , target )\n\t\t\t$mol_assert_equal( result.foo , source.foo )\n\t\t\t$mol_assert_equal( result.bar , target.bar )\n\t\t} ,\n\n\t\t'object with NaN'() {\n\n\t\t\tconst source = { foo : Number.NaN }\n\t\t\tconst target = { foo : Number.NaN }\n\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , source )\n\t\t} ,\n\n\t\t'array with NaN'() {\n\n\t\t\tconst source = [ Number.NaN ]\n\t\t\tconst target = [ Number.NaN ]\n\n\t\t\tconst result = $mol_conform( target , source )\n\n\t\t\t$mol_assert_equal( result , source )\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'trim array'() {\n\n\t\t\tconst array = [ undefined , null , 0, false , null , undefined , undefined ]\n\t\t\tconst correct = [ undefined , null , 0, false , null ]\n\t\t\t\n\t\t\t$mol_array_trim( array )\n\t\t\t\n\t\t\t$mol_assert_like( array , correct )\n\n\t\t}\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( async $ => {\n\t\tawait $mol_fiber_warp()\n\t\t$mol_fiber.deadline = Date.now() + 100\n\t} )\n\t\n\t\n\t$mol_test({\n\n\t\t'sync to async': async $ => {\n\t\t\t\n\t\t\tconst sum = $mol_fiber_async( ( a : number , b : number )=> a + b )\n\t\t\t\n\t\t\tconst res = await sum( 1 , 2 )\n\n\t\t\t$mol_assert_equal( res , 3 )\n\n\t\t},\n\n\t})\n\t\n}\n","module $ {\n\n\t$mol_test({\n\n\t\t'Value has js-path name' () {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get title() { return new $mol_object2 }\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( `${ App.title }` , 'App.title' )\n\n\t\t} ,\n\n\t\t'Simple property' () {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic value = 1\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.value , 1 )\n\n\t\t\tApp.value = 2\n\t\t\t$mol_assert_equal( App.value , 2 )\n\n\t\t} ,\n\n\t\t'Instant actualization'( $ ) {\n\n\t\t\tclass Source extends $mol_object2 {\n\t\t\t\t\n\t\t\t\t// Because context sets after field initializer\n\t\t\t\tget $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tvalue = 1\n\n\t\t\t\tdestructor() {}\n\n\t\t\t}\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get source() { return Source.create() }\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get value() { return this.source.value + 1 }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.value , 2 )\n\n\t\t\tApp.source.value = 2\n\t\t\t$mol_assert_equal( App.value , 3 )\n\n\t\t} ,\n\n\t\t'Access to cached value'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get value() { return 1 }\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( $mol_atom2_value( ()=> App.value ) , undefined )\n\n\t\t\t$mol_assert_equal( App.value , 1 )\n\t\t\t$mol_assert_equal( $mol_atom2_value( ()=> App.value ) , 1 )\n\n\t\t} ,\n\n\t\t'Do not recalc slaves on equal changes'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic first = [1]\n\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() { return this.first[0] + this.counter++ }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 1 )\n\n\t\t\tApp.first = [1]\n\t\t\t$mol_assert_equal( App.result , 1 )\n\n\t\t} ,\n\n\t\t'Do not recalc grand slave on equal direct slave result '( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic first = 1\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get second() { return Math.abs( this.first ) }\n\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() { return this.second + ++this.counter }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 2 )\n\n\t\t\tApp.first = -1\n\t\t\t$mol_assert_equal( App.result , 2 )\n\n\t\t} ,\n\n\t\t'Recalc when [not changed master] changes [following master]'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic first = 1\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get second() {\n\t\t\t\t\tthis.third = this.first\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic third = 0\n\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() { return this.second + this.third + ++this.counter }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 2 )\n\n\t\t\tApp.first = 5\n\t\t\t$mol_assert_equal( App.result , 7 )\n\n\t\t} ,\n\n\t\t'Branch switching'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic first = 1\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get second() { return 2 }\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic condition = true\n\t\t\t\t\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() {\n\t\t\t\t\treturn ( this.condition ? this.first : this.second ) + this.counter++\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 1 )\n\n\t\t\tApp.condition = false\n\t\t\t$mol_assert_equal( App.result , 3 )\n\n\t\t\tApp.first = 10\n\t\t\t$mol_assert_equal( App.result , 3 )\n\n\t\t} ,\n\n\t\t'Forbidden self invalidation'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic first = 1\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get second() { return this.first + 1 }\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() {\n\t\t\t\t\tthis.second\n\t\t\t\t\treturn this.first ++\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> App.result )\n\n\t\t} ,\n\n\t\t'Side effect inside computation'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic first = 1\n\n\t\t\t\t@ $mol_fiber.method\n\t\t\t\tstatic increase() { return ++ this.first }\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() {\n\t\t\t\t\treturn this.increase() + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 3 )\n\n\t\t} ,\n\n\t\t'Forbidden cyclic dependency'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get first() : number { return this.second - 1 }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get second() : number { return this.first + 1 }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> App.first )\n\n\t\t} ,\n\n\t\t'Forget sub fibers on complete'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_fiber.method\n\t\t\t\tstatic count() { return this.counter ++ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic data = 1\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() { return this.count() + this.data }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 1 )\n\n\t\t\tApp.data = 2\n\t\t\t$mol_assert_equal( App.result , 3 )\n\n\t\t} ,\n\n\t\tasync 'Automatic destroy owned value on self destruction'( $ ) {\n\n\t\t\tlet counter = 0\n\n\t\t\tclass Having extends $mol_object2 {\n\t\t\t\tdestructor() { counter++ }\n\t\t\t}\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get having() { return Having.create() }\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic condition = true\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() {\n\t\t\t\t\tif( this.condition ) this.having\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tApp.result\n\t\t\tApp.condition = false\n\t\t\tApp.result\n\n\t\t\t$mol_assert_equal( counter , 0 )\n\n\t\t\tawait $mol_fiber_warp()\n\t\t\t$mol_assert_equal( counter , 1 )\n\n\t\t} ,\n\n\t\tasync 'Do not destroy putted value'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic source : number\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic condition = true\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get target() {\n\t\t\t\t\treturn this.condition ? this.source : 0\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tApp.source = 1\n\t\t\t$mol_assert_equal( App.target , 1 )\n\t\t\t\n\t\t\tApp.condition = false\n\t\t\t$mol_assert_equal( App.target , 0 )\n\t\t\tawait $mol_fiber_warp()\n\t\t\t\n\t\t\tApp.condition = true\n\t\t\t$mol_assert_equal( App.target , 1 )\n\n\t\t} ,\n\n\t\t'Restore after error'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic condition = false\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get broken() {\n\t\t\t\t\tif( this.condition ) $mol_fail( new Error( 'test error' ) )\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get result() { return this.broken }\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result , 1 )\n\t\t\t\n\t\t\tApp.condition = true\n\t\t\t$mol_assert_fail( ()=> App.result )\n\t\t\t\n\t\t\tApp.condition = false\n\t\t\t$mol_assert_equal( App.result , 1 )\n\n\t\t} ,\n\t\n\t\tasync 'auto fresh only when alive'( $ ) {\n\n\t\t\tlet state = 1\n\n\t\t\tconst monitor = new $.$mol_atom2\n\t\t\tmonitor.$ = $\n\t\t\tmonitor.calculate = ()=> {\n\t\t\t\tnew $.$mol_after_frame( $mol_atom2.current!.fresh )\n\t\t\t\treturn state\n\t\t\t}\n\t\t\t$mol_assert_equal( monitor.get() , 1 )\n\t\t\t\n\t\t\tstate = 2\n\t\t\t$mol_assert_equal( monitor.get() , 1 )\n\t\t\t\t\n\t\t\t$.$mol_after_mock_warp()\n\t\t\t$mol_assert_equal( monitor.get() , 2 )\n\t\t\t\n\t\t\tstate = 3\n\t\t\t$mol_assert_equal( monitor.get() , 2 )\n\t\t\t\n\t\t\tmonitor.destructor()\n\t\t\t$mol_assert_equal( monitor.value , undefined )\n\t\t\t\n\t\t\t$.$mol_after_mock_warp()\n\t\t\tawait $.$mol_fiber_warp()\n\t\t\t$mol_assert_equal( monitor.value , undefined )\n\t\t\t\n\t\t} ,\n\n\t// \t'thenable interface: wait for value' () {\n\t// \t\t$mol_fiber_warp()\n\t\t\t\n\t// \t\tconst source = new $mol_atom2( 'source', ()=> {\n\t// \t\t\treturn $mol_fiber_async<number>( back => {\n\t// \t\t\t\tnew $mol_defer( back( ()=> 777 ) )\n\t// \t\t\t} )\n\t// \t\t} )\n\n\t// \t\tconst target = source.then( val => val.toString() )\n\t\t\t\n\t// \t\t$mol_assert_fail( ()=> target.value().valueOf() , $mol_fiber_wait.constructor )\n\n\t// \t\t$mol_defer.run() ; $mol_fiber_warp() ; $mol_atom2.sync()\n\n\t// \t\t$mol_assert_equal( target.value() , '777' )\n\t// \t} ,\n\t\t\n\t// \t'thenable interface: negative' () {\n\t// \t\t$mol_fiber_warp()\n\t\t\t\n\t// \t\tconst TestError = class extends Error {}\n\n\t// \t\tconst source = new $mol_atom2( 'source', ()=> {\n\t// \t\t\treturn $mol_fiber_async<number>( back => {\n\t// \t\t\t\tnew $mol_defer( back( ()=> {\n\t// \t\t\t\t\tthrow new TestError( 'Test error' )\n\t// \t\t\t\t} ) )\n\t// \t\t\t} )\n\t// \t\t} )\n\n\t// \t\tconst target = source.then( val => val.toString() )\n\t\t\t\n\t// \t\t$mol_assert_fail( ()=> target.value().valueOf() , $mol_fiber_wait.constructor )\n\t\t\t\n\t// \t\t$mol_defer.run()\n\t\t\t\n\t// \t\t$mol_assert_fail( ()=> { $mol_fiber_warp() } , TestError )\n\t// \t\t$mol_assert_fail( ()=> { $mol_fiber_warp() } , TestError )\n\t// \t\t$mol_assert_fail( ()=> { $mol_fiber_warp() } , TestError )\n\t// \t\t$mol_assert_fail( ()=> { $mol_fiber_warp() } , TestError )\n\n\t// \t\t$mol_assert_fail( ()=> target.value().valueOf() , TestError )\n\t// \t} ,\n\t\t\n\t})\n\t\n}\n",null,null,"namespace $ {\n\t$mol_test( {\n\n\t\t'Property method' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tstatic value( next = 1 ) { return next + 1 }\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.value() , 2 )\n\n\t\t\tApp.value( 2 )\n\t\t\t$mol_assert_equal( App.value() , 3 )\n\n\t\t} ,\n\n\t\t'auto sync of properties'($) {\n\n\t\t\tclass X extends $mol_object2 {\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tfoo( next? : number ) {\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tbar() {\n\t\t\t\t\treturn this.foo() + 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem\n\t\t\t\txxx() {\n\t\t\t\t\treturn this.bar() + 1\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst x = new X\n\t\t\tx.$ = $\n\n\t\t\t$mol_assert_equal( x.bar() , 2 )\n\t\t\t$mol_assert_equal( x.xxx() , 3 )\n\n\t\t\tx.foo( 5 )\n\t\t\t$mol_assert_equal( x.xxx() , 7 )\n\t\t} ,\n\n\t\t// 'must fail on recursive dependency'() {\n\t\t\n\t\t// \tclass App extends $mol_object {\n\t\t\n\t\t// \t\t@ $mol_mem\n\t\t// \t\tstatic foo() : number {\n\t\t// \t\t\treturn this.foo() + 1\n\t\t// \t\t}\n\t\t\n\t\t// \t}\n\t\t\n\t\t// \t$mol_assert_fail( ()=> App.foo() )\n\n\t\t// } ,\n\n\t\tasync 'must be deferred destroyed when no longer referenced'($) {\n\n\t\t\tlet foo : any\n\t\t\tlet foo_destroyed = false\n\n\t\t\tclass B extends $mol_object2 {\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tshowing( next? : boolean ) {\n\t\t\t\t\tif( next === void 0 ) return true\n\t\t\t\t\treturn next\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tfoo() {\n\t\t\t\t\treturn foo = new class extends $mol_object {\n\t\t\t\t\t\tdestructor() {\n\t\t\t\t\t\t\tfoo_destroyed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tbar() {\n\t\t\t\t\treturn this.showing() ? this.foo() : null\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar b = new B\n\t\t\tb.$ = $\n\n\t\t\tvar bar = b.bar()\n\t\t\t$mol_assert_ok( bar )\n\n\t\t\tb.showing( false )\n\t\t\tb.bar()\n\n\t\t\tawait $mol_fiber_warp()\n\t\t\t$mol_assert_ok( foo_destroyed )\n\t\t\t$mol_assert_not( b.bar() )\n\n\t\t\tb.showing( true )\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_unique( b.bar() , bar )\n\t\t} ,\n\n\t\tasync 'wait for data'($) {\n\n\t\t\tclass Test extends $mol_object2 {\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tsource() : string {\n\t\t\t\t\treturn $mol_fiber_sync( ()=> new Promise< string >( done => done( 'Jin' ) ) )()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tmiddle() {\n\t\t\t\t\treturn this.source()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem\n\t\t\t\ttarget() {\n\t\t\t\t\treturn this.middle()\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst t = new Test\n\t\t\tt.$ = $\n\n\t\t\t$mol_assert_fail( ()=> t.target().valueOf() , Promise )\n\n\t\t\tawait $mol_fiber_warp()\n\n\t\t\t$mol_assert_equal( t.target() , 'Jin' )\n\t\t} ,\n\n\t} )\n\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t$mol_test({\n\n\t\t'number'() {\n\t\t\tconst dict = new $mol_dict< number , number >()\n\t\t\t$mol_assert_equal( dict.get( 123 ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , false )\n\n\t\t\tdict.set( 123 , 321 )\n\t\t\t$mol_assert_equal( dict.get( 123 ) , 321 )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , true )\n\n\t\t\tdict.delete( 123 )\n\t\t\t$mol_assert_equal( dict.get( 123 ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , false )\n\t\t} ,\n\n\t\t'pojo as key'() {\n\t\t\tconst dict = new $mol_dict< { foo : number } , number >()\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , undefined )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , false )\n\n\t\t\tdict.set( { foo : 123 } , 321 )\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , 321 )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , true )\n\n\t\t\tdict.delete({ foo : 123 })\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , undefined )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , false )\n\t\t} ,\n\n\t\t'array as key'() {\n\t\t\tconst dict = new $mol_dict< [ number ] , number >()\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , undefined )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , false )\n\n\t\t\tdict.set( [ 123 ] , 321 )\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , 321 )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , true )\n\n\t\t\tdict.delete([ 123 ])\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , undefined )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , false )\n\t\t} ,\n\n\t\t'html element as key'() {\n\t\t\tconst el = <div />\n\n\t\t\tconst dict = new $mol_dict< Element , number >()\n\t\t\t$mol_assert_equal( dict.get( el ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( el ) , false )\n\n\t\t\tdict.set( el , 321 )\n\t\t\t$mol_assert_equal( dict.get( el ) , 321 )\n\t\t\t$mol_assert_equal( dict.has( el ) , true )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.get( <div/> ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( <div/> ) , false )\n\n\t\t\tdict.delete( el )\n\t\t\t$mol_assert_equal( dict.get( el ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( el ) , false )\n\t\t} ,\n\n\t\t'for-of key restore'() {\n\t\t\t\n\t\t\tconst dict = new $mol_dict< number , number >([[ 123 , 321 ]])\n\t\t\t\n\t\t\tconst keys = [] as number[]\n\t\t\tconst vals = [] as number[]\n\n\t\t\tfor( const [ key , val ] of dict ) {\n\t\t\t\tkeys.push( key )\n\t\t\t\tvals.push( val )\n\t\t\t}\n\n\t\t\t$mol_assert_equal( keys.length , 1 )\n\t\t\t$mol_assert_equal( keys[0] , 123 )\n\t\t\t\n\t\t\t$mol_assert_equal( vals.length , 1 )\n\t\t\t$mol_assert_equal( vals[0] , 321 )\n\n\t\t} ,\n\n\t\t'forEach key restore'() {\n\n\t\t\tconst dict = new $mol_dict< number , number >([[ 123 , 321 ]])\n\t\t\t\n\t\t\tconst keys = [] as number[]\n\t\t\tconst vals = [] as number[]\n\n\t\t\tdict.forEach( ( val , key )=> {\n\t\t\t\tkeys.push( key )\n\t\t\t\tvals.push( val )\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( keys.length , 1 )\n\t\t\t$mol_assert_equal( keys[0] , 123 )\n\t\t\t\n\t\t\t$mol_assert_equal( vals.length , 1 )\n\t\t\t$mol_assert_equal( vals[0] , 321 )\n\n\t\t} ,\n\n\t})\n}\n","module $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'keyed reactive properties' ($) {\n\t\t\t$mol_fiber_warp()\n\n\t\t\tclass Fib extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_mem_key\n\t\t\t\tstatic value( index : number , next? : number ) : number {\n\t\t\t\t\tif( next ) return next\n\t\t\t\t\tif( index < 2 ) return 1\n\t\t\t\t\treturn this.value( index - 1 ) + this.value( index - 2 )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( Fib.value( 10 ) , 89 )\n\n\t\t\tFib.value( 1 , 2 )\n\t\t\t$mol_assert_equal( Fib.value( 10 ) , 144 )\n\n\t\t} ,\n\n\t\t'cached property with simple key'($) {\n\n\t\t\tclass X extends $mol_object2 {\n\n\t\t\t\t@ $mol_mem_key\n\t\t\t\tfoo( id : number , next? : Number | null ) {\n\t\t\t\t\tif( next == null ) return new Number( 123 )\n\t\t\t\t\treturn new Number( next )\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tconst x = new X\n\t\t\tx.$ = $\n\n\t\t\t// get\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 123 )\n\t\t\t$mol_assert_equal( x.foo( 0 ) , x.foo( 0 ) )\n\t\t\t$mol_assert_unique( x.foo( 0 ) , x.foo( 1 ) )\n\n\t\t\t// set\n\t\t\tx.foo( 0 , 321 )\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 321 )\n\n\t\t\t// reset\n\t\t\tx.foo( 0 , null )\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 123 )\n\n\t\t} ,\n\n\t\t'cached property with complex key'($) {\n\n\t\t\tclass X extends $mol_object2 {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key\n\t\t\t\tfoo( ids : number[] ) {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tconst x = new X\n\t\t\tx.$ = $\n\n\t\t\t$mol_assert_equal( x.foo( [ 0 , 1 ] ) , x.foo( [ 0 , 1 ] ) )\n\t\t\t$mol_assert_unique( x.foo( [ 0 , 1 ] ) , x.foo( [ 0 , 2 ] ) )\n\t\t} ,\n\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( { \n\t\t\n\t\t'const returns stored value'() {\n\t\t\n\t\t\tconst foo = { bar : $mol_const( Math.random() ) }\n\t\t\t\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar() )\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar['()'] )\n\t\t\t\n\t\t} ,\n\n\t} )\n}\n","namespace $ {\n\n\texport function $mol_atom2_field<\n\t\tHost extends object ,\n\t\tField extends keyof Host ,\n\t\tValue extends Host[ Field ]\n\t>(\n\t\tproto : Host ,\n\t\tname : Field ,\n\t\tdescr? : TypedPropertyDescriptor< Value >\n\t) : any {\n\t\t\n\t\tif( !descr ) descr =  Object.getOwnPropertyDescriptor( proto , name )\n\n\t\tconst get = descr ? ( descr.get || $mol_const( descr.value! ) ) : ( ()=> undefined as unknown as Value )\n\t\tconst set = descr && descr.set || function( this : Host , next ) { get_cache( this ).put( next ) }\n\t\t\n\t\tconst store = new WeakMap< Host , $mol_atom2< Value > >()\n\n\t\tObject.defineProperty( proto , name + \"@\" , {\n\t\t\tget : function() {\n\t\t\t\treturn store.get( this )\n\t\t\t}\n\t\t} )\n\n\t\tconst get_cache = ( host : Host )=> {\n\t\t\t\n\t\t\tlet cache = store.get( host )\n\t\t\t\n\t\t\tif( !cache ) {\n\t\t\t\tcache = new $mol_atom2\n\t\t\t\tcache.calculate = get.bind( host )\n\t\t\t\tcache[ Symbol.toStringTag ] = `${ host }.${ name }`\n\t\t\t\tcache.abort = ()=> {\n\t\t\t\t\tstore.delete( host )\n\t\t\t\t\tcache!.forget()\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\t$mol_owning_catch( host , cache )\n\t\t\t\tstore.set( host , cache )\n\t\t\t}\n\n\t\t\treturn cache!\n\t\t}\n\n\t\treturn {\n\t\t\t\n\t\t\tget() {\n\t\t\t\treturn get_cache( this ).get()\n\t\t\t},\n\n\t\t\tset ,\n\n\t\t\t// set( next : Value ) {\n\t\t\t\t\n\t\t\t\t// const slave = $mol_fiber.current \n\n\t\t\t\t// let master = slave && slave.master as $mol_fiber< void >\n\t\t\t\t// if( !master ) {\n\t\t\t\t// \tmaster = new $mol_fiber\n\t\t\t\t// \tmaster.calculate = ()=> {\n\t\t\t\t\t\t// set.call( this , next )\n\t\t\t\t// \t}\n\t\t\t\t// \tmaster[ Symbol.toStringTag ] = `${ this }.${ name }=`\n\t\t\t\t// }\n\n\t\t\t\t// master.get()\n\n\t\t\t// }\n\n\t\t}\n\n\t}\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\tasync 'Autorun' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic state = 1\n\t\t\t\t\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_atom2_field\n\t\t\t\tstatic get init() {\n\t\t\t\t\t++ this.counter\n\t\t\t\t\treturn this.state\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst autorun = $mol_atom2_autorun( ()=> App.init )\n\t\t\tautorun.$ = $\n\n\t\t\ttry {\n\n\t\t\t\tawait $mol_fiber_warp()\n\t\t\t\t$mol_assert_equal( App.counter , 1 )\n\t\t\t\t\n\t\t\t\tApp.state = 2\n\t\t\t\t$mol_assert_equal( App.counter , 1 )\n\n\t\t\t\tawait $mol_fiber_warp()\n\t\t\t\t$mol_assert_equal( App.counter , 2 )\n\t\t\t\t\n\t\t\t\tApp.state = 3\n\n\t\t\t} finally {\n\t\t\t\tautorun.destructor()\n\t\t\t}\n\n\t\t\tApp.state = 4\n\t\t\tawait $mol_fiber_warp()\n\t\t\t$mol_assert_equal( App.counter , 2 )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_timeout = $mol_after_mock_timeout as any as typeof $mol_after_timeout\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'memoize field' () {\n\n\t\t\tclass Foo {\n\n\t\t\t\tstatic one = 1\n\n\t\t\t\t@ $mol_memo.field\n\t\t\t\tstatic get two() {\n\t\t\t\t\treturn ++ this.one\n\t\t\t\t}\n\t\t\t\tstatic set two( next : number ) {} \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\n\t\t\tFoo.two = 3\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 3 )\n\t\t\t$mol_assert_equal( Foo.two , 3 )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'FQN of anon function'($) {\n\t\t\tconst $$ = Object.assign( $ , { $mol_func_name_test : ( ()=> ()=> {} )() } )\n\t\t\t$mol_assert_equal( $$.$mol_func_name_test.name , '' )\n\t\t\t$mol_assert_equal( $$.$mol_func_name( $$.$mol_func_name_test ) , '$mol_func_name_test' )\n\t\t\t$mol_assert_equal( $$.$mol_func_name_test.name , '$mol_func_name_test' )\n\t\t},\n\n\t})\n\n}\n",null,"namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'id auto generation'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test_item extends $mol_view { }\n\t\t\t\n\t\t\tclass $mol_view_test_block extends $mol_view {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key\n\t\t\t\telement( id : number ) {\n\t\t\t\t\treturn new $mol_view_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = $mol_view_test_block.Root(0)\n\t\t\t\n\t\t\t$mol_assert_equal( x.dom_node().id , '$mol_view_test_block.Root(0)' )\n\t\t\t$mol_assert_equal( x.element( 0 ).dom_node().id , '$mol_view_test_block.Root(0).element(0)' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'caching ref to dom node'($) {\n\t\t\t\n\t\t\tvar x = new class extends $mol_view { }\n\t\t\tx.$ = $\n\t\t\t\n\t\t\t$mol_assert_equal( x.dom_node() , x.dom_node() )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'content render'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tsub() {\n\t\t\t\t\treturn [ 'lol' , 5 ]\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_tree()\n\t\t\t\n\t\t\t$mol_assert_equal( node.innerHTML , 'lol5' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'bem attributes generation'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test_item extends $mol_view { }\n\t\t\t\n\t\t\tclass $mol_view_test_block extends $mol_view {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key\n\t\t\t\tElement( id : number ) {\n\t\t\t\t\treturn new $mol_view_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test_block()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\t$mol_assert_equal( x.dom_node().getAttribute( 'mol_view_test_block' ) , '' )\n\t\t\t$mol_assert_equal( x.dom_node().getAttribute( 'mol_view' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.Element( 0 ).dom_node().getAttribute( 'mol_view_test_block_element' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.Element( 0 ).dom_node().getAttribute( 'mol_view_test_item' ) , '' )\n\t\t\t$mol_assert_equal( x.Element( 0 ).dom_node().getAttribute( 'mol_view' ) , '' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom attributes'($) {\n\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tattr() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'href' : '#haha' ,\n\t\t\t\t\t\t'required' : true ,\n\t\t\t\t\t\t'hidden' : false ,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_tree()\n\t\t\t\n\t\t\t$mol_assert_equal( node.getAttribute( 'href' ) , '#haha' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'required' ) , 'true' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'hidden' ) , null )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom fields'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tfield() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'hidden' : true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_tree() as HTMLElement\n\t\t\t\n\t\t\t$mol_assert_equal( node.hidden , true )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'attach event handlers'($) {\n\t\t\t\t\n\t\t\tvar clicked = false\n\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tevent() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'click' : ( next? : Event ) => this.event_click( next )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevent_click( next? : Event ) {\n\t\t\t\t\tclicked = true\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_node() as HTMLElement\n\t\t\tnode.click()\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t\t\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\n\texport class $mol_style_sheet_test1 extends $mol_view {\n\t\tItem() { return new $mol_view }\n\t}\n\n\texport class $mol_style_sheet_test2 extends $mol_view {\n\t\tList() { return new $mol_style_sheet_test1 }\n\t}\n\n\t$mol_test({\n\n\t\t'component block styles'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tdisplay: 'block',\n\t\t\t\tzIndex: 1,\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tdisplay: block;\\n\\tz-index: 1;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'various units'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px , per } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\twidth : per(50),\n\t\t\t\theight : px(50),\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\twidth: 50%;\\n\\theight: 50px;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'various functions'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { calc } = $mol_style_func\n\t\t\tconst { px , per } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\twidth : calc( `${ per(100) } - ${ px(1) }` ),\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\twidth: calc(100% - 1px);\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'property groups'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tflex : {\n\t\t\t\t\tgrow : 5\n\t\t\t\t}\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tflex-grow: 5;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'property shorthand'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tpadding : [ px(5) , 'auto' ]\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tpadding: 5px auto;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'sequenced values'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { url } = $mol_style_func\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tbackground: {\n\t\t\t\t\timage: [ [url('foo')], [url('bar')] ],\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tbackground-image: url(\"foo\"),url(\"bar\");\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'sequenced structs'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { rem } = $mol_style_unit\n\t\t\tconst { hsla } = $mol_style_func\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tbox: {\n\t\t\t\t\tshadow: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinset: true,\n\t\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\tblur: rem(.5),\n\t\t\t\t\t\t\tspread: 0,\n\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinset: false,\n\t\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\tblur: rem(.5),\n\t\t\t\t\t\t\tspread: 0,\n\t\t\t\t\t\t\tcolor: 'blue',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tbox-shadow: inset 0 0 0.5rem 0 red,0 0 0.5rem 0 blue;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with pseudo class'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t':focus': {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test]:focus {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with pseudo element'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'::first-line': {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test]::first-line {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with media query'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'@media': {\n\t\t\t\t\t'print': {\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '@media print {\\n[mol_style_sheet_test] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with attribute value'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {\n\t\t\t\tattr() { return {\n\t\t\t\t\tmol_theme: '$mol_theme_dark'\n\t\t\t\t} }\n\t\t\t}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'@' : {\n\t\t\t\t\tmol_theme: {\n\t\t\t\t\t\t'$mol_theme_dark': {\n\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test][mol_theme=\"$mol_theme_dark\"] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component element styles'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {\n\t\t\t\tItem() { return new $mol_view }\n\t\t\t}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tItem : {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test_item] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component element of element styles'() {\n\t\t\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test2 , {\n\t\t\t\tList : {\n\t\t\t\t\tItem : {\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test2_list_item] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component element styles with block attribute value'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {\n\t\t\t\tItem() { return new $mol_view }\n\t\t\t\tattr() { return {\n\t\t\t\t\tmol_theme: '$mol_theme_dark'\n\t\t\t\t} }\n\t\t\t}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'@' : {\n\t\t\t\t\tmol_theme: {\n\t\t\t\t\t\t'$mol_theme_dark': {\n\t\t\t\t\t\t\tItem: {\n\t\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test][mol_theme=\"$mol_theme_dark\"] [mol_style_sheet_test_item] {\\n\\tcolor: red;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'inner component styles by class'() {\n\t\t\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test2 , {\n\t\t\t\t$mol_style_sheet_test1 : {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test2] [mol_style_sheet_test1] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'child component styles by class'() {\n\t\t\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test2 , {\n\t\t\t\t'>' : {\n\t\t\t\t\t$mol_style_sheet_test1 : {\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test2] > [mol_style_sheet_test1] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'null by default' () {\n\t\t\tconst key = String( Math.random() )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , null )\n\t\t} ,\n\t\t\n\t\t'storing' () {\n\t\t\tconst key = String( Math.random() )\n\t\t\t\n\t\t\t$mol_state_session.value( key , '$mol_state_session_test' )\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , '$mol_state_session_test' )\n\t\t\t\n\t\t\t$mol_state_session.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , null )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( context => {\n\t\tclass $mol_state_local_mock< Value > extends $mol_state_local< Value > {\n\n\t\t\tstatic state = {} as Record< string , any >\n\t\t\t\t\t\t\n\t\t\t@ $mol_mem_key\n\t\t\tstatic value< Value >( key : string , next = this.state[ key ] as Value , force? : $mol_mem_force ) {\n\t\t\t\treturn this.state[ key ] = ( next || null )\n\t\t\t}\n\n\t\t}\n\t\tcontext.$mol_state_local = $mol_state_local_mock\n\t} )\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'local get set delete'() {\n\t\t\t\t\t\n\t\t\tvar key = '$mol_state_local_test:' + Math.random()\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t\t\n\t\t\t$mol_state_local.value( key , 123 )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , 123 )\n\t\t\t\n\t\t\t$mol_state_local.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $.$$ {\n\t\n\t$mol_test({\n\t\t\n\t\t'handle clicks by default'($) {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = $mol_button.make({\n\t\t\t\t$,\n\t\t\t\tevent_click : ( event : MouseEvent )=> { clicked = true } ,\n\t\t\t})\n\t\t\t\n\t\t\tconst element = clicker.dom_tree() as HTMLButtonElement\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\tevent.initEvent( 'click' , true , true )\n\t\t\telement.dispatchEvent( event )\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t} ,\n\t\t\n\t\t'no handle clicks if disabled'($) {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = $mol_button.make({\n\t\t\t\t$,\n\t\t\t\tevent_click : ( event : MouseEvent )=> { clicked = true } ,\n\t\t\t\tenabled : ()=> false ,\n\t\t\t})\n\t\t\t\n\t\t\tconst element = clicker.dom_tree() as HTMLButtonElement\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\tevent.initEvent( 'click' , true , true )\n\t\t\telement.dispatchEvent( event )\n\t\t\t\n\t\t\t$mol_assert_not( clicked )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'all cases of using maybe'() {\n\t\t\t$mol_assert_equal( $mol_maybe( 0 )[ 0 ] , 0 )\n\t\t\t$mol_assert_equal( $mol_maybe( false )[ 0 ] , false )\n\t\t\t$mol_assert_equal( $mol_maybe( null )[ 0 ] , void 0 )\n\t\t\t$mol_assert_equal( $mol_maybe( void 0 )[ 0 ] , void 0 )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_maybe< number >( void 0 ).map( v => v.toString() )[ 0 ] , void 0 )\n\t\t\t$mol_assert_equal( $mol_maybe( 0 ).map( v => v.toString() )[ 0 ] , '0' )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test({\n\t\t'decode utf8 string'() {\n\t\t\tconst str = 'Hello, ΧΨΩЫ'\n\t\t\tconst encoded = new Uint8Array( [ 72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171 ] )\n\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded), str )\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded, 'utf8'), str )\n\t\t},\n\n\t\t'decode empty string'() {\n\t\t\tconst encoded = new Uint8Array( [] )\n\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded), '' )\n\t\t},\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t'encode utf8 string'() {\n\t\t\tconst str = 'Hello, ΧΨΩЫ'\n\t\t\tconst encoded = new Uint8Array( [ 72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171 ] )\n\n\t\t\t$mol_assert_like( $mol_charset_encode(str), encoded )\n\t\t},\n\t})\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_work = $mol_after_mock_timeout as any as typeof $mol_after_work\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( context => {\n\t\tclass $mol_state_arg_mock extends $mol_state_arg {\n\n\t\t\tstatic $ = context\n\t\t\t\t\t\t\n\t\t\t@ $mol_mem\n\t\t\tstatic href( next? : string ) { return next || '' }\n\t\n\t\t}\n\t\tcontext.$mol_state_arg = $mol_state_arg_mock\n\t} )\n\n\t$mol_test({\n\t\t\n\t\t'args as dictionary'( $ ) {\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/xxx' )\n\t\t\t$mol_assert_like( $.$mol_state_arg.dict() , { foo : 'bar' , xxx : '' } )\n\n\t\t\t$.$mol_state_arg.dict({ foo : null , yyy : '' , lol : '123' })\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!yyy/lol=123' )\n\n\t\t} ,\n\n\t\t'one value from args'( $ ) {\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/xxx' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.value( 'foo' ) , 'bar' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.value( 'xxx' ) , '' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , 'lol' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo=lol/xxx' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , '' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo/xxx' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , null )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!xxx' )\n\n\t\t} ,\n\n\t\t'nested args'( $ ) {\n\n\t\t\tconst base = new $.$mol_state_arg( 'nested.' )\n\n\t\t\tclass Nested extends $mol_state_arg {\n\t\t\t\tconstructor( prefix : string ) {\n\t\t\t\t\tsuper( base.prefix + prefix )\n\t\t\t\t}\n\t\t\t\tstatic value = ( key : string , next? : string )=> base.value( key , next )\n\t\t\t}\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/nested.xxx=123' )\n\t\t\t$mol_assert_equal( Nested.value( 'foo' ) , null )\n\t\t\t$mol_assert_equal( Nested.value( 'xxx' ) , '123' )\n\n\t\t\tNested.value( 'foo' , 'lol' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo=bar/nested.xxx=123/nested.foo=lol' )\n\n\t\t} ,\n\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Change dict by different keys'() {\n\t\t\t\n\t\t\tconst val = $hyoo_crowd_dict.of({ val: $hyoo_crowd_list }).make().fork(1)\n\t\t\tval.for( 'foo' ).insert( 666 )\n\t\t\tval.for( 'bar' ).insert( 777 )\n\t\t\tval.for( 'foo' ).insert( 888, 0 )\n\t\t\tval.for( 'bar' ).cut( 777 )\n\t\t\t\n\t\t\t$mol_assert_like( val.delta(), $hyoo_crowd_delta(\n\t\t\t\t[ 'foo', 888, 666, 'bar', 777 ],\n\t\t\t\t[ -2, 3000001, 1000001, -1, -4000001 ],\n\t\t\t) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Slice dict after version'() {\n\t\t\t\n\t\t\tconst val = $hyoo_crowd_dict.of({ val: $hyoo_crowd_set }).make().fork(1)\n\t\t\t\n\t\t\tval.for( 'foo' ).add( 1 )\n\t\t\tval.for( 'bar' ).add( 2 )\n\t\t\tval.for( 'xxx' ).add( 3 )\n\t\t\t\n\t\t\tconst clock1 = val.clock.fork(0)\n\t\t\t\n\t\t\tval.for( 'foo' ).add( 4 )\n\t\t\tval.for( 'bar' ).add( 5 )\n\t\t\tval.for( 'xxx' ).add( 6 )\n\n\t\t\tconst clock2 = val.clock.fork(0)\n\t\t\t\n\t\t\t$mol_assert_like( val.delta( clock1 ), $hyoo_crowd_delta(\n\t\t\t\t[ 'foo', 4, 'bar', 5, 'xxx', 6 ],\n\t\t\t\t[ -1, +4000001, -1, +5000001, -1, +6000001 ],\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_like( val.delta( clock2 ), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Merge different dicts'() {\n\t\t\t\n\t\t\tconst left = $hyoo_crowd_dict.of({ val: $hyoo_crowd_list }).make().fork(1)\n\t\t\tleft.for( 'foo' ).insert( 666 )\n\t\t\tleft.for( '' ).insert( 'xxx' )\n\t\t\t\n\t\t\tconst right = $hyoo_crowd_dict.of({ val: $hyoo_crowd_list }).make().fork(2)\n\t\t\tright.for( 'foo' ).insert( 777 )\n\t\t\tright.for( 'bar' ).insert( 'yyy' )\n\t\t\tright.for( 'bar' ).insert( 'zzz' )\n\t\t\t\n\t\t\tconst left_delta = left.delta() \n\t\t\tconst right_delta = right.delta() \n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 777, 666, '', 'xxx', 'bar', 'yyy', 'zzz' ],\n\t\t\t\t\t[ -2, 1000002, 1000001, -1, 2000001, -2, 2000002, 3000002 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 777, 666, 'bar', 'yyy', 'zzz', '', 'xxx' ],\n\t\t\t\t\t[ -2, 1000002, 1000001, -2, 2000002, 3000002, -1, 2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Merge increases versions in dicts'() {\n\t\t\t\n\t\t\tconst base = $hyoo_crowd_dict.of({ val: $hyoo_crowd_list }).make()\n\t\t\t\n\t\t\tconst left = base.fork(1)\n\t\t\tleft.for( 'foo' ).insert( 'xxx' )\n\t\t\t\n\t\t\tconst right = base.fork(2)\n\t\t\tright.for( 'bar' ).insert( 17 )\n\t\t\tright.for( 'bar' ).insert( 18 )\n\t\t\t\n\t\t\tleft.apply( right.delta() )\n\t\t\tleft.for( 'foo' ).insert( 'yyy' )\n\t\t\t\n\t\t\t$mol_assert_like( left.delta(), $hyoo_crowd_delta(\n\t\t\t\t[ 'foo', 'xxx', 'yyy', 'bar', 17, 18 ],\n\t\t\t\t[ -2, 1000001, 3000001, -2, 1000002, 2000002 ],\n\t\t\t) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Dictionary of Union'() {\n\t\t\t\n\t\t\tconst base = $hyoo_crowd_dict.of({\n\t\t\t\tval: $hyoo_crowd_union.of({\n\t\t\t\t\tstring: $hyoo_crowd_reg,\n\t\t\t\t\tarray: $hyoo_crowd_list,\n\t\t\t\t\tobject: $hyoo_crowd_set,\n\t\t\t\t})\n\t\t\t}).make()\n\n\t\t\tconst left = base.fork(1)\n\t\t\tconst right = base.fork(2)\n\t\t\t\n\t\t\tleft.for( 'foo' ).to( 'string' ).str( 'bar' )\n\t\t\tright.for( 'foo' ).to( 'array' ).insert( 'xxx' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.apply( right_delta ).delta(),\n\t\t\t\tright.apply( left_delta ).delta(),\n\t\t\t\t$hyoo_crowd_delta(\n\t\t\t\t\t[ 'foo', 'array', 'xxx', 'bar' ],\n\t\t\t\t\t[ -3, -1000002, 2000002, 2000001 ],\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Dictionary of Dictionary'() {\n\t\t\t\n\t\t\tconst base = $hyoo_crowd_dict.of({\n\t\t\t\tval: $hyoo_crowd_dict.of({\n\t\t\t\t\tval: $hyoo_crowd_reg,\n\t\t\t\t}),\n\t\t\t}).make()\n\n\t\t\tconst left = base.fork(1)\n\t\t\tconst right = base.fork(2)\n\t\t\t\n\t\t\tleft.for( 'foo' ).for( 'xxx' ).str( '321' )\n\t\t\tright.for( 'foo' ).for( 'yyy' ).str( '123' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clock )\n\t\t\tconst right_delta = right.delta( base.clock )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.for( 'foo' ).for( 'xxx' ).str(),\n\t\t\t\tright.for( 'foo' ).for( 'xxx' ).str(),\n\t\t\t\t'321',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.for( 'foo' ).for( 'yyy' ).str(),\n\t\t\t\tright.for( 'foo' ).for( 'yyy' ).str(),\n\t\t\t\t'123',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Default tuple state'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_dict.of({\n\t\t\t\tkeys: $hyoo_crowd_list,\n\t\t\t\tvals: $hyoo_crowd_dict.of({ val: $hyoo_crowd_reg }),\n\t\t\t}).make()\n\t\t\t\n\t\t\t$mol_assert_like( store.for('keys').items(), [] )\n\t\t\t$mol_assert_like( store.for('vals').for( 'foo' ).str(), '' )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta([],[]) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Changed tuple state'() {\n\t\t\t\n\t\t\tconst Map = $hyoo_crowd_dict.of({\n\t\t\t\tvers: $hyoo_crowd_numb,\n\t\t\t\tkeys: $hyoo_crowd_set,\n\t\t\t\tvals: $hyoo_crowd_dict.of({ val: $hyoo_crowd_reg }),\n\t\t\t})\n\t\t\t\n\t\t\tconst store = Map.make().fork(1)\n\t\t\t\n\t\t\tstore.for( 'keys' ).add( 'foo' ).add( 'bar' )\n\t\t\tstore.for( 'vals' ).for( 'xxx' ).str( 'yyy' )\n\t\t\t\n\t\t\t$mol_assert_like( store.for('vers').numb(), 0 )\n\t\t\t$mol_assert_like( store.for('keys').items, [ 'foo', 'bar' ] )\n\t\t\t$mol_assert_like( store.for('vals').for( 'xxx' ).str(), 'yyy' )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta(\n\t\t\t\t[ 'keys', 'foo', 'bar', 'vals', 'xxx', 'yyy' ],\n\t\t\t\t[ -2, +1000001, +2000001, -2, -1, +3000001 ],\n\t\t\t) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Tuple of tuples'() {\n\t\t\t\n\t\t\tconst Point = $hyoo_crowd_dict.of({\n\t\t\t\tX: $hyoo_crowd_numb,\n\t\t\t\tY: $hyoo_crowd_numb,\n\t\t\t})\n\t\t\t\n\t\t\tconst Rect = $hyoo_crowd_dict.of({\n\t\t\t\tTL: Point,\n\t\t\t\tBR: Point,\n\t\t\t})\n\t\t\t\n\t\t\tconst store = Rect.make().fork(1)\n\t\t\t\n\t\t\tstore.for( 'TL' ).for( 'X' ).shift( -2 )\n\t\t\tstore.for( 'TL' ).for( 'Y' ).shift( -3 )\n\t\t\tstore.for( 'BR' ).for( 'X' ).shift( +5 )\n\t\t\tstore.for( 'BR' ).for( 'Y' ).shift( +7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.for( 'TL' ).for( 'X' ).numb(), -2 )\n\t\t\t$mol_assert_like( store.for( 'TL' ).for( 'Y' ).numb(), -3 )\n\t\t\t$mol_assert_like( store.for( 'BR' ).for( 'X' ).numb(), +5 )\n\t\t\t$mol_assert_like( store.for( 'BR' ).for( 'Y' ).numb(), +7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.delta(), $hyoo_crowd_delta(\n\t\t\t\t[ \"TL\", \"X\", -2, \"Y\", -3, \"BR\", \"X\", +5, \"Y\", +7 ],\n\t\t\t\t[ -4, -1, +1000001, -1, +2000001, -4, -1, +3000001, -1, +4000001 ],\n\t\t\t) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n",null,"namespace $ {\n\n\t$mol_test({\n\n\t\t'escape' () {\n\n\t\t\tconst specials = $mol_regexp.from( '.*+?^${}()|[]\\\\' )\n\t\t\t$mol_assert_equal( specials.source , '\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\' )\n\n\t\t},\n\n\t\t'char code' () {\n\n\t\t\tconst space = $mol_regexp.char_code( 32 )\n\t\t\t$mol_assert_equal( space.exec(' ')![0] , ' ' )\n\n\t\t},\n\n\t\t'repeat fixed'() {\n\n\t\t\tconst { repeat , digit } = $mol_regexp\n\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\t$mol_assert_equal( year.exec( '#2020#' )![0] , '2020' )\n\n\t\t},\n\n\t\t'greedy repeat'() {\n\n\t\t\tconst { repeat , repeat_greedy , letter } = $mol_regexp\n\n\t\t\t$mol_assert_equal( repeat( letter ).exec( 'abc' )![0] , '' )\n\t\t\t$mol_assert_equal( repeat_greedy( letter ).exec( 'abc' )![0] , 'abc' )\n\n\t\t},\n\n\t\t'repeat range'() {\n\n\t\t\tconst { repeat_greedy , digit } = $mol_regexp\n\n\t\t\tconst year = repeat_greedy( digit , 2 , 4 )\n\t\t\t\n\t\t\t$mol_assert_equal( year.exec( '#2#' ) , null )\n\t\t\t$mol_assert_equal( year.exec( '#20#' )![0] , '20' )\n\t\t\t$mol_assert_equal( year.exec( '#2020#' )![0] , '2020' )\n\t\t\t$mol_assert_equal( year.exec( '#20201#' )![0] , '2020' )\n\n\t\t},\n\n\t\t'repeat from'() {\n\n\t\t\tconst { repeat_greedy , letter } = $mol_regexp\n\n\t\t\tconst name = repeat_greedy( letter , 2 )\n\n\t\t\t$mol_assert_equal( name.exec( '##' ) , null )\n\t\t\t$mol_assert_equal( name.exec( '#a#' ) , null )\n\t\t\t$mol_assert_equal( name.exec( '#ab#' )![0] , 'ab' )\n\t\t\t$mol_assert_equal( name.exec( '#abc#' )![0] , 'abc' )\n\n\t\t},\n\n\t\t'optional'() {\n\n\t\t\tconst { optional , letter } = $mol_regexp\n\n\t\t\tconst name = optional( letter )\n\n\t\t\t$mol_assert_equal( name.exec( '' )![0] , '' )\n\t\t\t$mol_assert_equal( name.exec( 'a' )![0] , 'a' )\n\t\t\t$mol_assert_equal( name.exec( 'ab' )![0] , 'a' )\n\n\t\t},\n\n\t\t'from string'() {\n\n\t\t\tconst regexp = $mol_regexp.from( '[\\\\d]' )\n\t\t\t\n\t\t\t$mol_assert_equal( regexp.source , '\\\\[\\\\\\\\d\\\\]' )\n\t\t\t$mol_assert_equal( regexp.flags , 'gu' )\n\n\t\t},\n\n\t\t'from regexp'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( /[\\d]/i )\n\t\t\t\n\t\t\t$mol_assert_equal( regexp.source , '[\\\\d]' )\n\t\t\t$mol_assert_equal( regexp.flags , 'i' )\n\n\t\t},\n\n\t\t'case ignoring'() {\n\n\t\t\tconst xxx = $mol_regexp.from( 'x' , { ignoreCase : true } )\n\n\t\t\t$mol_assert_like( xxx.flags , 'giu' )\n\t\t\t$mol_assert_like( xxx.exec( 'xx' )![0] , 'x' )\n\t\t\t$mol_assert_like( xxx.exec( 'XX' )![0] , 'X' )\n\n\t\t},\n\n\t\t'multiline mode'() {\n\n\t\t\tconst { end } = $mol_regexp\n\n\t\t\tconst xxx = $mol_regexp.from( [ 'x' , end ] , { multiline : true } )\n\n\t\t\t$mol_assert_like( xxx.exec( 'x\\ny' )![0] , 'x' )\n\t\t\t$mol_assert_like( xxx.flags , 'gmu' )\n\n\t\t},\n\n\t\t'sequence'() {\n\n\t\t\tconst { begin , end , digit , repeat } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst date = $mol_regexp.from( [ begin , year , dash , month , dash , day , end ] , { ignoreCase : true } )\n\n\t\t\t$mol_assert_like( date.exec( '2020-01-02' )![0] , '2020-01-02' )\n\t\t\t$mol_assert_like( date.ignoreCase , true )\n\n\t\t},\n\n\t\t'only groups'() {\n\n\t\t\tconst regexp = $mol_regexp.from({ dog : '@' })\n\n\t\t\t$mol_assert_like( [ ... regexp.parse( '#' ) ] , [{ 0: '#' }] )\n\t\t\t$mol_assert_like( [ ... regexp.parse( '@' ) ] , [{ dog : '@' }] )\n\n\t\t},\n\n\t\t'catch skipped'() {\n\n\t\t\tconst regexp = $mol_regexp.from(/(@)(\\d?)/g)\n\n\t\t\t$mol_assert_like( [ ... regexp.parse( '[[@]]' ) ] , [\n\t\t\t\t{ 0 : '[[' },\n\t\t\t\t{ 1 : '@' , 2 : '' },\n\t\t\t\t{ 0 : ']]' },\n\t\t\t] )\n\n\t\t},\n\n\t\t'enum variants'() {\n\n\t\t\tenum Sex {\n\t\t\t\tmale = 'male',\n\t\t\t\tfemale = 'female',\n\t\t\t}\n\n\t\t\tconst sexism = $mol_regexp.from( Sex )\n\n\t\t\t$mol_assert_like( [ ... sexism.parse( '' ) ] , [] )\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'male' ) ] , [{ male : 'male' , female : '' }] )\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'female' ) ] , [{ male : '' , female : 'female' }] )\n\n\t\t},\n\n\t\t'recursive only groups'() {\n\n\t\t\tenum Sex {\n\t\t\t\tmale = 'male',\n\t\t\t\tfemale = 'female',\n\t\t\t}\n\n\t\t\tconst sexism = $mol_regexp.from({ Sex })\n\n\t\t\t$mol_assert_like( [ ... sexism.parse( '' ) ] , [] )\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'male' ) ] , [{ Sex : 'male' , male : 'male' , female : '' }] )\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'female' ) ] , [{ Sex : 'female' , male : '' , female : 'female' }] )\n\n\t\t},\n\n\t\t'sequence with groups'() {\n\n\t\t\tconst { begin , end , digit , repeat } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst regexp = $mol_regexp.from([ begin , {year} , dash , {month} , dash , {day} , end ])\n\t\t\tconst found = [ ... regexp.parse( '2020-01-02' ) ]\n\n\t\t\t$mol_assert_like( found , [{\n\t\t\t\tyear : '2020' ,\n\t\t\t\tmonth : '01' ,\n\t\t\t\tday : '02' ,\n\t\t\t}] )\n\n\t\t},\n\n\t\t'sequence with groups of mixed type'() {\n\n\t\t\tconst prefix = '/'\n\t\t\tconst postfix = '/'\n\n\t\t\tconst regexp = $mol_regexp.from([ {prefix} , /(\\w+)/ , {postfix} , /([gumi]*)/ ])\n\t\t\tconst found = [ ... regexp.parse( '/foo/mi' ) ]\n\n\t\t\t$mol_assert_like( found , [{\n\t\t\t\tprefix : '/' ,\n\t\t\t\t0 : 'foo' ,\n\t\t\t\tpostfix : '/' ,\n\t\t\t\t1 : 'mi' ,\n\t\t\t}] )\n\n\t\t},\n\n\t\t'recursive sequence with groups'() {\n\n\t\t\tconst { begin , end , digit , repeat } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst regexp = $mol_regexp.from([ begin , { date : [ {year} , dash , {month} ] } , dash , {day} , end ])\n\t\t\tconst found = [ ... regexp.parse( '2020-01-02' ) ]\n\n\t\t\t$mol_assert_like( found , [{\n\t\t\t\tdate : '2020-01' ,\n\t\t\t\tyear : '2020' ,\n\t\t\t\tmonth : '01' ,\n\t\t\t\tday : '02' ,\n\t\t\t}] )\n\n\t\t},\n\n\t\t'parse multiple'() {\n\n\t\t\tconst { digit } = $mol_regexp\n\n\t\t\tconst regexp = $mol_regexp.from({ digit })\n\n\t\t\t$mol_assert_like( [ ... regexp.parse( '123' ) ] , [\n\t\t\t\t{ digit : '1' },\n\t\t\t\t{ digit : '2' },\n\t\t\t\t{ digit : '3' },\n\t\t\t] )\n\n\t\t},\n\n\t\t'variants'() {\n\n\t\t\tconst { begin , or , end } = $mol_regexp\n\n\t\t\tconst sexism = $mol_regexp.from([ begin , 'sex = ' , { sex : [ 'male' , or , 'female' ] } , end ])\n\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'sex = male' ) ] , [{ sex : 'male' }] )\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'sex = female' ) ] , [{ sex : 'female' }] )\n\t\t\t$mol_assert_like( [ ... sexism.parse( 'sex = malefemale' ) ] , [{ 0: 'sex = malefemale' }] )\n\n\t\t},\n\n\t\t'force after'() {\n\n\t\t\tconst { letter , force_after } = $mol_regexp\n\n\t\t\tconst regexp = $mol_regexp.from([ letter , force_after( '.' ) ])\n\n\t\t\t$mol_assert_equal( regexp.exec( 'x.' )![0] , 'x' )\n\t\t\t$mol_assert_equal( regexp.exec( 'x5' ) , null )\n\n\t\t},\n\n\t\t'forbid after'() {\n\n\t\t\tconst { letter , forbid_after } = $mol_regexp\n\n\t\t\tconst regexp = $mol_regexp.from([ letter , forbid_after( '.' ) ])\n\n\t\t\t$mol_assert_equal( regexp.exec( 'x.' ) , null )\n\t\t\t$mol_assert_equal( regexp.exec( 'x5' )![0] , 'x' )\n\n\t\t},\n\n\t\t'byte except'() {\n\n\t\t\tconst { char_except, letter, tab } = $mol_regexp\n\n\t\t\tconst name = char_except( letter, tab )\n\n\t\t\t$mol_assert_equal( name.exec( 'a' ) , null )\n\t\t\t$mol_assert_equal( name.exec( '\\t' ) , null )\n\t\t\t$mol_assert_equal( name.exec( '(' )![0] , '(' )\n\n\t\t},\n\n\t\t'unicode only'() {\n\n\t\t\tconst { unicode_only } = $mol_regexp\n\n\t\t\tconst name = $mol_regexp.from([\n\t\t\t\tunicode_only( 'Script', 'Cyrillic' ),\n\t\t\t\tunicode_only( 'Hex_Digit' ),\n\t\t\t])\n\n\t\t\t$mol_assert_equal( name.exec( 'FF' ) , null )\n\t\t\t$mol_assert_equal( name.exec( 'ФG' ) , null )\n\t\t\t$mol_assert_equal( name.exec( 'ФF' )![0] , 'ФF' )\n\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'empty string'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( '' ) ],\n\t\t\t\t[],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'new lines'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( '\\n\\r\\n' ) ].map( t => t.token ),\n\t\t\t\t[ '\\n', '\\r\\n' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'emoji'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( '😀😁' ) ].map( t => t.token ),\n\t\t\t\t[ '😀', '😁' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'emoji with modifier'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( '👩🏿👩🏿' ) ].map( t => t.token ),\n\t\t\t\t[ '👩🏿', '👩🏿' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'combo emoji with modifier'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( '👩🏿‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏿' ) ].map( t => t.token ),\n\t\t\t\t[ '👩🏿‍🤝‍🧑🏿', '👩🏿‍🤝‍🧑🏿' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with spaces'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( 'foo1  bar2' ) ].map( t => t.token ),\n\t\t\t\t[ 'foo1 ', ' ', 'bar2' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with diactric'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( 'Е́е́' ) ].map( t => t.token ),\n\t\t\t\t[ 'Е́е́' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with punctuation'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( 'foo--bar' ) ].map( t => t.token ),\n\t\t\t\t[ 'foo--', 'bar' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'CamelCase'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... $hyoo_crowd_text_tokenizer.parse( 'Foo1BAR2' ) ].map( t => t.token ),\n\t\t\t\t[ 'Foo1', 'BAR2' ],\n\t\t\t)\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Default state'() {\n\t\t\tconst store = new $hyoo_crowd_text()\n\t\t\t$mol_assert_like( store.text(), '' )\n\t\t},\n\t\t\n\t\t'Auto tokenize'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.tokens.length, 2 )\n\t\t\t$mol_assert_like( store.text(), 'foo bar' )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, +4000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Replace with same tokens count'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\tstore.text( 'xxx yyy' )\n\t\t\t\n\t\t\t$mol_assert_like( store.tokens.length, 2 )\n\t\t\t$mol_assert_like( store.text(), 'xxx yyy' )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, +4000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Replace with more tokens count'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\tstore.text( 'foo de bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.tokens.length, 3 )\n\t\t\t$mol_assert_like( store.text(), 'foo de bar' )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, +6000001, +4000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Replace with more tokens count with side changes'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo  bar' )\n\t\t\tstore.text( 'foo de bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.tokens.length, 3 )\n\t\t\t$mol_assert_like( store.text(), 'foo de bar' )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, +4000001, +6000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Space doubling'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\tstore.text( 'foo  bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.tokens.length, 3 )\n\t\t\t$mol_assert_like( store.text(), 'foo  bar' )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, +6000001, +4000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Replace with less tokens count'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo de bar' )\n\t\t\tstore.text( 'foo bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.tokens.length, 2 )\n\t\t\t$mol_assert_like( store.text(), 'foo bar' )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, +6000001, -7000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Cut from end'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\tstore.text( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'foo' )\n\t\t\t$mol_assert_like( store.tokens.length, 1 )\n\t\t\t$mol_assert_like( store.root.delta().stamps, [ +2000001, -6000001 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Concurrent changes'() {\n\t\t\t\n\t\t\tconst base = new $hyoo_crowd_text()\n\t\t\tbase.text( 'Hello World and fun!' )\n\t\t\t\n\t\t\tconst left = base.fork(1)\n\t\t\tconst right = base.fork(2)\n\t\t\t\n\t\t\tleft.text( 'Hello Alice and fun!' )\n\t\t\tright.text( 'Say: Hello World and fun!' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tleft.text(),\n\t\t\t\tright.text(),\n\t\t\t\t'Say: Hello Alice and fun!',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Splice inside token'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foobar' )\n\t\t\tstore.write( 'XYZ', 2, 2 )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'foXYZar' )\n\t\t\t$mol_assert_like( store.tokens.length, 2 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Splice over some tokens'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'xxx foo bar yyy' )\n\t\t\tstore.write( 'X Y Z', 6, 3 )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'xxx foX Y Zar yyy' )\n\t\t\t$mol_assert_like( store.tokens.length, 6 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Splice whole token'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'xxx foo yyy' )\n\t\t\tstore.write( 'bar', 4, 4 )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'xxx baryyy' )\n\t\t\t$mol_assert_like( store.tokens.length, 2 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Splice whole text'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\tstore.write( 'xxx', 0, 7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'xxx' )\n\t\t\t$mol_assert_like( store.tokens.length, 1 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Splice at the end'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo' )\n\t\t\tstore.write( 'xxx', 3 )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'fooxxx' )\n\t\t\t$mol_assert_like( store.tokens.length, 1 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Splice between tokens'() {\n\t\t\t\n\t\t\tconst store = new $hyoo_crowd_text().fork(1)\n\t\t\tstore.text( 'foo bar' )\n\t\t\tstore.write( 'xxx', 4 )\n\t\t\t\n\t\t\t$mol_assert_like( store.text(), 'foo xxxbar' )\n\t\t\t$mol_assert_like( store.tokens.length, 2 )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'$mol_syntax2_md_flow'() {\n\t\t\t\n\t\t\tconst check = ( input : string , right : [ string , string , string[] , number ][] )=> {\n\t\t\t\tconst tokens = [] as typeof right\n\t\t\t\t$mol_syntax2_md_flow.tokenize( input , ( ... token )=> tokens.push( token ) )\n\t\t\t\t$mol_assert_like( JSON.stringify( tokens ) , JSON.stringify( right ) )\n\t\t\t}\n\n\t\t\tcheck( 'Hello,\\nWorld..\\r\\n\\r\\n\\nof Love!' , [\n\t\t\t\t[ 'block' , 'Hello,\\nWorld..\\r\\n\\r\\n\\n' , [ 'Hello,\\nWorld..' , '\\r\\n\\r\\n\\n' ] , 0 ] ,\n\t\t\t\t[ 'block' , 'of Love!' , [ 'of Love!' , '' ] , 19 ] ,\n\t\t\t] )\n\t\t\t\n\t\t\tcheck( '# Header1\\n\\nHello!\\n\\n## Header2' , [\n\t\t\t\t[ 'header' , '# Header1\\n\\n' , [ '#' , ' ' , 'Header1' , '\\n\\n' ] , 0 ] ,\n\t\t\t\t[ 'block' , 'Hello!\\n\\n' , [ 'Hello!' , '\\n\\n' ] , 11 ] ,\n\t\t\t\t[ 'header' , '## Header2' , [ '##' , ' ' , 'Header2' , '' ] , 19 ] ,\n\t\t\t] )\n\t\t\t\n\t\t\tcheck( '```\\nstart()\\n```\\n\\n```js\\nrestart()\\n```\\n\\nHello!\\n\\n```\\nstop()\\n```' , [\n\t\t\t\t[ 'code' , '```\\nstart()\\n```\\n\\n' , [ '```' , '' , 'start()\\n' , '```' , '\\n\\n' ] , 0 ] ,\n\t\t\t\t[ 'code' , '```js\\nrestart()\\n```\\n\\n' , [ '```' , 'js' , 'restart()\\n' , '```' , '\\n\\n' ] , 17 ] ,\n\t\t\t\t[ 'block' , 'Hello!\\n\\n' , [ 'Hello!' , '\\n\\n' ] , 38 ] ,\n\t\t\t\t[ 'code' , '```\\nstop()\\n```' , [ '```' , '' , 'stop()\\n' , '```' , '' ] , 46 ] ,\n\t\t\t] )\n\t\t\t\n\t\t\tcheck( '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , [\n\t\t\t\t[ 'table' , '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n\\n' , [ '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , '\\n' ] , 0 ] ,\n\t\t\t\t[ 'table' , '| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , [ '| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , '' ] , 68 ] ,\n\t\t\t] )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Attach to document'() {\n\n\t\t\tconst doc = $mol_dom_parse( '<html><body id=\"/foo\"></body></html>' )\n\n\t\t\t$mol_jsx_attach( doc , ()=> <body id=\"/foo\">bar</body> )\n\n\t\t\t$mol_assert_equal( doc.documentElement.outerHTML , '<html><body id=\"/foo\">bar</body></html>' )\n\t\t\t\n\t\t} ,\t\t\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\texport function $mol_jsx_attach< Result >( next : typeof $mol_jsx_document , action : ()=> Result ) {\n\t\tconst prev = $mol_jsx_document\n\t\ttry {\n\t\t\t$mol_jsx_document = next\n\t\t\treturn action()\n\t\t} finally {\n\t\t\t$mol_jsx_document = prev\n\t\t}\n\t}\n\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Class as component'() {\n\n\t\t\tclass Foo extends $mol_jsx_view {\n\n\t\t\t\ttitle = ''\n\t\t\t\t\n\t\t\t\trender() {\n\t\t\t\t\treturn <div>{ this.title } { this.childNodes.join( '-' ) }</div>\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst dom = <Foo id=\"/foo\" title=\"bar\">xxx{123}</Foo>\n\n\t\t\t$mol_assert_equal( dom.outerHTML , '<div id=\"/foo\">bar xxx-123</div>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'View by element'() {\n\n\t\t\tclass Br extends $mol_jsx_view {\n\n\t\t\t\trender() {\n\t\t\t\t\tview = this\n\t\t\t\t\treturn <br id=\"/foo\" />\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet view! : Br\n\n\t\t\t$mol_assert_equal( Br.of( <Br /> ) , view )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Attached view rerender'() {\n\n\t\t\tconst doc = $mol_dom_parse( '<html><body id=\"/foo\"></body></html>' )\n\t\t\t\n\t\t\tclass Title extends $mol_jsx_view {\n\n\t\t\t\tvalue = 'foo'\n\t\t\t\t\n\t\t\t\trender() {\n\t\t\t\t\treturn <div>{ this.value }</div>\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tconst dom = $mol_jsx_attach( doc , ()=> <Title id=\"/foo\" /> )\n\t\t\tconst title = Title.of( dom )\n\t\t\t\n\t\t\t$mol_assert_equal( title.ownerDocument , doc )\n\t\t\t$mol_assert_equal( doc.documentElement.outerHTML , '<html><body id=\"/foo\">foo</body></html>' )\n\t\t\t\n\t\t\ttitle.value = 'bar'\n\t\t\ttitle.valueOf()\n\t\t\t\n\t\t\t$mol_assert_equal( doc.documentElement.outerHTML , '<html><body id=\"/foo\">bar</body></html>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\tasync 'Reactive attached view'($) {\n\n\t\t\tconst doc = $mol_dom_parse( '<html><body id=\"/foo\"></body></html>' )\n\t\t\t\n\t\t\tclass Task extends $mol_object2 {\n\n\t\t\t\t@ $mol_mem\n\t\t\t\ttitle( next? : string ) { return next || 'foo' }\n\t\t\t\t\n\t\t\t}\n\n\t\t\tclass App extends $mol_jsx_view {\n\t\t\t\t\n\t\t\t\t@ $mol_mem\n\t\t\t\ttask() { return new Task }\n\n\t\t\t\t@ $mol_mem\n\t\t\t\tvalueOf() {\n\t\t\t\t\treturn super.valueOf()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trender() {\n\t\t\t\t\treturn <div>{ this.task().title() }</div>\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst task = new Task\n\t\t\ttask.$ = $\n\n\t\t\tconst autorun = $.$mol_atom2_autorun( ()=> $mol_jsx_attach( doc , ()=> <App $={$} id=\"/foo\" task={ ()=> task } /> ) )\n\t\t\tautorun.$ = $\n\t\t\t\n\t\t\tawait $mol_fiber_warp()\n\t\t\t$mol_assert_equal( doc.documentElement.outerHTML , '<html><body id=\"/foo\">foo</body></html>' )\n\n\t\t\ttask.title( 'bar' )\n\t\t\tawait $mol_fiber_warp()\n\t\t\t$mol_assert_equal( doc.documentElement.outerHTML , '<html><body id=\"/foo\">bar</body></html>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\n\texport class $mol_jsx_view extends $mol_object2 {\n\n\t\tstatic of< This extends typeof $mol_jsx_view >( this : This , node : Element ) {\n\t\t\treturn node[ this as any ] as InstanceType< This >\n\t\t}\n\t\t\n\t\t[ Symbol.toStringTag ] : string\n\t\t\n\t\tattributes! : Partial< Pick< this , Exclude< keyof this , 'valueOf' > > >\n\t\townerDocument! : typeof $mol_jsx_document\n\t\tchildNodes! : Array< Node | string >\n\t\t\n\t\tvalueOf() {\n\t\t\t\n\t\t\tconst prefix = $mol_jsx_prefix\n\t\t\tconst booked = $mol_jsx_booked\n\t\t\tconst document = $mol_jsx_document\n\t\t\t\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\t$mol_jsx_prefix = this[ Symbol.toStringTag ]\n\t\t\t\t$mol_jsx_booked = new Set\n\t\t\t\t$mol_jsx_document = this.ownerDocument\n\n\t\t\t\treturn this.render()\n\n\t\t\t} finally {\n\n\t\t\t\t$mol_jsx_prefix = prefix\n\t\t\t\t$mol_jsx_booked = booked\n\t\t\t\t$mol_jsx_document = document\n\n\t\t\t}\n\n\t\t}\n\t\t\n\t\trender() : HTMLElement {\n\t\t\treturn $mol_fail( new Error( 'dom_tree() not implemented' ) )\n\t\t}\n\n\t}\n\n}\n",null,null,"namespace $ {\n\n\t$mol_test({\n\n\t\t'equal paths' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2,3,4] , [1,2,3,4] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2,3,4] , \n\t\t\t\tsuffix : [ [] , [] , [] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'different suffix' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2,3,5] , [1,2,5,4] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2] , \n\t\t\t\tsuffix : [ [3,4] , [3,5] , [5,4] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'one contains other' () {\n\t\t\t\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2] , [1,2,3] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2] , \n\t\t\t\tsuffix : [ [3,4] , [] , [3] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'fully different' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2] , [3,4] , [5,6] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [] , \n\t\t\t\tsuffix : [ [1,2] , [3,4] , [5,6] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\texport function $mol_diff_path< Item >( ... paths : Item[][] ) {\n\n\t\tconst limit = Math.min( ... paths.map( path => path.length ) )\n\n\t\tlookup: for( var i = 0 ; i < limit ; ++i ) {\n\n\t\t\tconst first = paths[0][i]\n\n\t\t\tfor( let j = 1 ; j < paths.length ; ++j ) {\n\t\t\t\tif( paths[j][i] !== first ) break lookup\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tprefix : paths[0].slice( 0 , i ) ,\n\t\t\tsuffix : paths.map( path => path.slice( i ) ) ,\n\t\t}\n\n\t}\n\n}\n","namespace $ {\n\n\texport class $mol_error_mix extends Error {\n\n\t\terrors : Error[]\n\n\t\tconstructor( message : string , ... errors : Error[] ) {\n\n\t\t\tsuper( message )\n\t\t\t\n\t\t\tthis.errors = errors\n\n\t\t\tif( errors.length ) {\n\n\t\t\t\tconst stacks = [ ... errors.map( error => error.message ) , this.stack ]\n\t\t\t\t\n\t\t\t\tconst diff = $mol_diff_path( ... stacks.map( stack => {\n\t\t\t\t\tif( !stack ) return []\n\t\t\t\t\treturn stack.split( '\\n' ).reverse()\n\t\t\t\t} ) )\n\t\t\t\t\n\t\t\t\tconst head = diff.prefix.reverse().join( '\\n' )\n\t\t\t\tconst tails = diff.suffix.map( path => path.reverse().map( line => line.replace( /^(?!\\s+at)/ , '\\tat (.) ' ) ).join( '\\n' ) ).join( '\\n\\tat (.) -----\\n' )\n\n\t\t\t\tthis.stack = `Error: ${ this.constructor.name }\\n\\tat (.) /\"\"\"\\\\\\n${ tails }\\n\\tat (.) \\\\___/\\n${ head }`\n\t\t\t\tthis.message += errors.map( error => '\\n' + error.message ).join( '' )\n\n\t\t\t}\n\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.message\n\t\t}\n\n\t}\n\n}\n","namespace $.$$ {\n\n\t$mol_test( {\n\t\t'simple props'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_simple.make({ $ })\n\n\t\t\t$mol_assert_equal( app.some() , 1 )\n\t\t\t$mol_assert_equal( app.bool() , true )\n\t\t\t$mol_assert_equal( app.str() , 'test' )\n\t\t\t$mol_assert_ok( Array.isArray(app.arr()) )\n\t\t\t$mol_assert_ok( Array.isArray(app.arr_string()) )\n\t\t},\n\n\t\t'default value'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_binding.make({ $ })\n\t\t\t$mol_assert_equal( app.value() , '123' )\n\t\t},\n\n\t\t'both binding'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_binding.make({ $ })\n\n\t\t\t$mol_assert_ok( app.value() !== 1 )\n\n\t\t\tapp.value(1)\n\t\t\t$mol_assert_equal( app.value() , 1 )\n\t\t},\n\n\t\t'left binding'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_binding.make({ $ })\n\n\t\t\t$mol_assert_not( app.head_complete_enabled() )\n\t\t\t$mol_assert_not( app.enabled() )\n\t\t},\n\n\t\t'sub component'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_binding_right.make({ $ })\n\t\t\t$mol_assert_ok( app.Test() instanceof $mol_view_tree_test_binding_right_test)\n\t\t},\n\n\t\t'right binding - change owner property'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_binding_right.make({ $ })\n\n\t\t\tconst val = 123\n\n\t\t\t$mol_assert_ok( app.outer_width() !== val )\n\t\t\t$mol_assert_ok( app.Test().width() !== val )\n\n\t\t\tapp.outer_width(val)\n\n\t\t\t$mol_assert_equal( app.outer_width(), val )\n\t\t\t$mol_assert_equal( app.Test().width(), val )\n\t\t},\n\n\t\t'right binding - change part property'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_binding_right.make({ $ })\n\n\t\t\tconst val = 123\n\n\t\t\t$mol_assert_ok( app.outer_width() !== val )\n\t\t\t$mol_assert_ok( app.Test().width() !== val )\n\n\t\t\tapp.Test().width(val)\n\n\t\t\t$mol_assert_equal( app.Test().width(), val )\n\t\t\t$mol_assert_equal( app.outer_width(), val )\n\t\t},\n\n\t\t'attributes merging'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_attributes.make({ $ })\n\n\t\t\t$mol_assert_like( app.some(), { a: 1, b: 2 } )\n\t\t},\n\n\t\t'subcomponent indexed'( $ ) {\n\t\t\tconst app = $mol_view_tree_test_attributes_subcomponent.make({ $ })\n\t\t\tconst val = 123\n\t\t\tapp.page = (index: any) => index\n\n\t\t\t$mol_assert_equal(app.Page(val).Sub(), val)\n\t\t},\n \n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'tree parsing'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"foo\\nbar\\n\" ).sub.length , 2 )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"foo\\nbar\\n\" ).sub[ 1 ].type , \"bar\" )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"foo\\n\\n\\n\" ).sub.length , 1 )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"=foo\\n\\\\bar\\n\" ).sub.length , 2 )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"=foo\\n\\\\bar\\n\" ).sub[ 1 ].data , \"bar\" )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"foo bar \\\\pol\" ).sub[ 0 ].sub[ 0 ].sub[ 0 ].data , \"pol\" )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( \"foo bar\\n\\t\\\\pol\\n\\t\\\\men\" ).sub[ 0 ].sub[ 0 ].sub[ 1 ].data , \"men\" )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'foo bar \\\\text\\n' ).toString() , 'foo bar \\\\text\\n' )\n\t\t} ,\n\n\t\t'inserting'() {\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'a b c d' ).insert( new $mol_tree , 'a' , 'b' , 'c' ).toString() , 'a b \\\\\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'a b' ).insert( new $mol_tree , 'a' , 'b' , 'c' , 'd' ).toString() , 'a b c \\\\\\n' )\n\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'a b c d' ).insert( new $mol_tree , 0 , 0 , 0 ).toString() , 'a b \\\\\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'a b' ).insert( new $mol_tree , 0 , 0 , 0 , 0 ).toString() , 'a b \\\\\\n\\t\\\\\\n' )\n\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'a b c d' ).insert( new $mol_tree , null , null , null ).toString() , 'a b \\\\\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromString( 'a b' ).insert( new $mol_tree , null , null , null , null ).toString() , 'a b \\\\\\n\\t\\\\\\n' )\n\t\t} ,\n\n\t\t'fromJSON'() {\n\t\t\t$mol_assert_equal( $mol_tree.fromJSON([]).toString() , '/\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromJSON([ false , true ]).toString() , '/\\n\\tfalse\\n\\ttrue\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromJSON([ 0 , 1 , 2.3 ]).toString() , '/\\n\\t0\\n\\t1\\n\\t2.3\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromJSON([ '' , 'foo' , 'bar\\nbaz' ]).toString() , '/\\n\\t\\\\\\n\\t\\\\foo\\n\\t\\\\\\n\\t\\t\\\\bar\\n\\t\\t\\\\baz\\n' )\n\t\t\t$mol_assert_equal( $mol_tree.fromJSON({ 'foo' : false , 'bar\\nbaz' : 'lol' }).toString() , '*\\n\\tfoo false\\n\\t\\\\\\n\\t\\t\\\\bar\\n\\t\\t\\\\baz\\n\\t\\t\\\\lol\\n' )\n\t\t} ,\n\t\t\n\t\t'toJSON'() {\n\t\t\t$mol_assert_equal( JSON.stringify( $mol_tree.fromString( '/\\n' ).sub[0] ) , '[]' )\n\t\t\t$mol_assert_equal( JSON.stringify( $mol_tree.fromString( '/\\n\\tfalse\\n\\ttrue\\n' ).sub[0] ) , '[false,true]' )\n\t\t\t$mol_assert_equal( JSON.stringify( $mol_tree.fromString( '/\\n\\t0\\n\\t1\\n\\t2.3\\n' ).sub[0] ) , '[0,1,2.3]' )\n\t\t\t$mol_assert_equal( JSON.stringify( $mol_tree.fromString( '/\\n\\t\\\\\\n\\t\\\\foo\\n\\t\\\\\\n\\t\\t\\\\bar\\n\\t\\t\\\\baz\\n' ).sub[0] ) , '[\"\",\"foo\",\"bar\\\\nbaz\"]' )\n\t\t\t$mol_assert_equal( JSON.stringify( $mol_tree.fromString( '*\\n\\tfoo false\\n\\t\\\\\\n\\t\\t\\\\bar\\n\\t\\t\\\\baz\\n\\t\\t\\\\lol\\n' ).sub[0] ) , '{\"foo\":false,\"bar\\\\nbaz\":\"lol\"}' )\n\t\t} ,\n\t\t\n\t\t'hack'() {\n\n\t\t\tconst res = $mol_tree.fromString( `foo bar xxx` ).hack({\n\t\t\t\t'' : ( tree , context )=> [ tree.hack( context ) ] ,\n\t\t\t\t'bar' : ( tree , context )=> [ tree.hack( context ).clone({ type : '777' }) ] ,\n\t\t\t})\n\n\t\t\t$mol_assert_equal( res.toString() , new $mol_tree({ type : 'foo 777 xxx' }).toString() )\n\n\t\t} ,\n\n\t\t'errors handling'( $ ) {\n\n\t\t\tconst errors = [] as string[]\n\n\t\t\tclass Tree extends $mol_tree {\n\t\t\t\tstatic $ = $.$mol_ambient({\n\t\t\t\t\t$mol_fail: error => errors.push( error.message ) as never\n\t\t\t\t})\n\t\t\t}\n\t\t\t\n\t\t\tTree.fromString( `\n\t\t\t\t\\t \\tfoo\n\t\t\t\tbar \\\\data\n\t\t\t` , 'test' )\n\n\t\t\t$mol_assert_like( errors , [ 'Syntax error at test:2\\n \\tfoo' ] )\n\n\t\t},\n\n\t} )\t\n}\n"]}